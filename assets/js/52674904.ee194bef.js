"use strict";(self.webpackChunkmymove_docs=self.webpackChunkmymove_docs||[]).push([[6720],{1293:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>d,toc:()=>p});var s=n(87462),i=(n(67294),n(3905));n(8209);const o={sidebar_position:6},r="How To Store UI State in Redux",d={unversionedId:"frontend/guides/store-ui-state-in-redux",id:"frontend/guides/store-ui-state-in-redux",title:"How To Store UI State in Redux",description:"State that is specific to the UI should be set by dispatching an action and accessed using a selector. Here is an",source:"@site/docs/frontend/guides/store-ui-state-in-redux.md",sourceDirName:"frontend/guides",slug:"/frontend/guides/store-ui-state-in-redux",permalink:"/mymove-docs/docs/frontend/guides/store-ui-state-in-redux",draft:!1,editUrl:"https://github.com/transcom/mymove-docs/edit/main/docs/frontend/guides/store-ui-state-in-redux.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"frontendSidebar",previous:{title:"How To Store Data in Redux",permalink:"/mymove-docs/docs/frontend/guides/how-to-store-api-data-on-the-front-end"},next:{title:"Icons",permalink:"/mymove-docs/docs/frontend/guides/icons"}},a={},p=[],c={toc:p},m="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,s.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"how-to-store-ui-state-in-redux"},"How To Store UI State in Redux"),(0,i.kt)("p",null,"State that is specific to the UI should be set by dispatching an action and accessed using a selector. Here is an\nexample of how this might work for managing which of a list of Shipments is currently selected in the UI:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import { get } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { Component} from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { lastError } from 'shared/Swagger/ducks';\nimport { allShipments, selectShipment } from 'shared/Entities/modules/shipments';\nimport { setCurrentShipmentID, currentShipmentID } from 'shared/UI/ducks';\n\nconst requestLabel = 'ShipmentForm.loadShipments';\n\nexport class ShipmentList extends Component {\n    componentDidMount() {\n        const id = get(this.props, 'shipmentID');\n        if (!id) return;\n\n        this.props.listShipments(requestLabel);\n    }\n\n    shipmentClicked = (id) => {\n       this.props.setCurrentShipmentID(id);\n    }\n\n    render {\n        const { shipments, selectedShipment, error } = this.props;\n\n        return (\n            <div>\n                { error && <p>An error has occurred.</p> }\n\n                <ul>\n                    { shipments.map(shipment => (<li>\n                        <button onClick={this.shipmentClicked.bind(shipment.id)}> { shipment.id } </button>\n                      </li>))}\n                </ul>\n\n                <p>The selected shipment is { selectedShipment.id }.</p>\n            </div>\n        );\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ request, setCurrentShipmentID }, dispatch);\n}\n\nfunction mapStateToProps(state) {\n  return {\n    shipments: allShipments(state),\n    selectedShipment: selectShipment(state, currentShipmentID(state)),\n    error: lastError(state, requestLabel),\n  };\n}\n")),(0,i.kt)("p",null,"Note that the above use of defining an inline event handler for ",(0,i.kt)("inlineCode",{parentName:"p"},"onClick")," is not considered a\nbest practice. This technique is used above only for its brevity."))}u.isMDXComponent=!0}}]);