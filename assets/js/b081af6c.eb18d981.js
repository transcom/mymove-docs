"use strict";(self.webpackChunkmymove_docs=self.webpackChunkmymove_docs||[]).push([[9827],{78336:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=t(45072),r=(t(11504),t(95788));t(10880);const i={sidebar_position:7},o="How to set up an experimental feature flag",l={unversionedId:"backend/guides/how-to/add-an-experimental-feature-flag",id:"backend/guides/how-to/add-an-experimental-feature-flag",title:"How to set up an experimental feature flag",description:'Backend feature flags via the "experimental" way utilize environment variables rather than Flipt API or Chamber secrets.',source:"@site/docs/backend/guides/how-to/add-an-experimental-feature-flag.md",sourceDirName:"backend/guides/how-to",slug:"/backend/guides/how-to/add-an-experimental-feature-flag",permalink:"/mymove-docs/docs/backend/guides/how-to/add-an-experimental-feature-flag",draft:!1,editUrl:"https://github.com/transcom/mymove-docs/edit/main/docs/backend/guides/how-to/add-an-experimental-feature-flag.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"backendSidebar",previous:{title:"How to manage Golang with asdf",permalink:"/mymove-docs/docs/backend/guides/how-to/manage-golang-with-asdf"},next:{title:"How to upgrade Node",permalink:"/mymove-docs/docs/backend/guides/how-to/upgrade-node"}},p={},d=[{value:"Setting up environment variables",id:"setting-up-environment-variables",level:2},{value:"Naming convention",id:"naming-convention",level:3},{value:"CircleCI deployment flags",id:"circleci-deployment-flags",level:3},{value:"Development flags",id:"development-flags",level:3},{value:"How to use the EnvFetcher",id:"how-to-use-the-envfetcher",level:2},{value:"Handler config",id:"handler-config",level:3},{value:"Code example",id:"code-example",level:3}],s={toc:d},g="wrapper";function m(e){let{components:n,...t}=e;return(0,r.yg)(g,(0,a.c)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"how-to-set-up-an-experimental-feature-flag"},"How to set up an experimental feature flag"),(0,r.yg)("p",null,'Backend feature flags via the "experimental" way utilize environment variables rather than Flipt API or Chamber secrets.'),(0,r.yg)("h2",{id:"setting-up-environment-variables"},"Setting up environment variables"),(0,r.yg)("h3",{id:"naming-convention"},"Naming convention"),(0,r.yg)("p",null,"Feature flags stored inside of the environment variables files should be prefixed with ",(0,r.yg)("inlineCode",{parentName:"p"},"FEATURE_FLAG_"),". It must be prefixed this way in order for the ",(0,r.yg)("inlineCode",{parentName:"p"},"EnvFetcher")," to properly retrieve it."),(0,r.yg)("p",null,"Code example:\n",(0,r.yg)("inlineCode",{parentName:"p"},"export FEATURE_FLAG_EXAMPLE=true")," (Sets the feature flag ",(0,r.yg)("em",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"em"},"example"))," to true)"),(0,r.yg)("h3",{id:"circleci-deployment-flags"},"CircleCI deployment flags"),(0,r.yg)("p",null,"To set a feature flag as enabled or disabled within certain deployment environments, you must update the corresponding ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/transcom/mymove/tree/main/config"},"config")," environment variables. CircleCI deployment environments can be found under the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/transcom/mymove/tree/main/config/env"},"config/env folder"),"."),(0,r.yg)("p",null,'When you export your feature flag variable for a specific environment, make sure you update its "app" and its respective "app-client-tls" file. Example:'),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'// ${environment} can be "prd", "exp", "stg", "loadtest", "demo", "review", and so on as environments change.\n\nconfig/env/{$environment}.app.env\n\nconfig/env/{$environment}.app-client-tls.env\n')),(0,r.yg)("p",null,"Adding ",(0,r.yg)("inlineCode",{parentName:"p"},"FEATURE_FLAG_EXAMPLE=false")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"true")," per environment. You do not need to add ",(0,r.yg)("inlineCode",{parentName:"p"},"export")," to the front like you would in a typical ",(0,r.yg)("inlineCode",{parentName:"p"},".envrc")," file."),(0,r.yg)("h3",{id:"development-flags"},"Development flags"),(0,r.yg)("admonition",{type:"warning"},(0,r.yg)("p",{parentName:"admonition"},"Ensure you have properly configured the CircleCI deployment flags prior to implementing any feature flags to the root ",(0,r.yg)("inlineCode",{parentName:"p"},".envrc")," file. This guarantees these feature flags will not be accidentally pushed without being configured for deployment first.")),(0,r.yg)("p",null,"The development value for the feature flag is added to the root ",(0,r.yg)("inlineCode",{parentName:"p"},".envrc")," file within the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/transcom/mymove"},"mymove repository"),". It should be set to ",(0,r.yg)("inlineCode",{parentName:"p"},"true")," if the feature flag should be enabled inside of development."),(0,r.yg)("h2",{id:"how-to-use-the-envfetcher"},"How to use the EnvFetcher"),(0,r.yg)("h3",{id:"handler-config"},"Handler config"),(0,r.yg)("p",null,"If the EnvFetcher is not enabled inside of the HandlerConfig, it is likely disabled. To re-enable it, you must import it to the interface so that you can use it when handling endpoints."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"// HandlerConfig provides access to all the contextual references\n// needed by individual handlers\ntype HandlerConfig interface {\n  ...\n    EnvFetcher() services.EnvFetcher // Experimental, TODO: Replace with full flipt FeatureFlagFetcher implementation\n}\n")),(0,r.yg)("p",null,"Here is what the EnvFetcher interface should look like inside of the services package."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"// EnvFetcher is the exported interface for environment sourced feature flags\n//\n// This service is an experimental implementation of feature flags until\n// we fully migrate to flipt. These flags will be managed at the code level via .envrc and config/env/*.env\n//\n//go:generate mockery --name EnvFetcher\ntype EnvFetcher interface {\n    GetBooleanFlagForUser(ctx context.Context, appCtx appcontext.AppContext, key string, flagContext map[string]string) (FeatureFlag, error)\n    GetBooleanFlag(ctx context.Context, logger *zap.Logger, entityID string, key string, flagContext map[string]string) (FeatureFlag, error)\n    GetVariantFlagForUser(ctx context.Context, appCtx appcontext.AppContext, key string, flagContext map[string]string) (FeatureFlag, error)\n    GetVariantFlag(ctx context.Context, logger *zap.Logger, entityID string, key string, flagContext map[string]string) (FeatureFlag, error)\n}\n\n")),(0,r.yg)("h3",{id:"code-example"},"Code example"),(0,r.yg)("p",null,"In this example we will review how to utilize the experimental feature flag via ",(0,r.yg)("inlineCode",{parentName:"p"},"EnvFetcher")," inside of a handler. The createMTOShipmentHandler with flag ",(0,r.yg)("inlineCode",{parentName:"p"},"MULTI_MOVE")," was used for this."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'import  (\n    "context"\n    "github.com/transcom/mymove/pkg/appcontext"\n)\n\n...\n\n// Handle creates the mto shipment\nfunc (h CreateMTOShipmentHandler) Handle(params mtoshipmentops.CreateMTOShipmentParams) middleware.Responder {\n    return h.AuditableAppContextFromRequestWithErrors(params.HTTPRequest,\n        func(appCtx appcontext.AppContext) (middleware.Responder, error) {\n\n            // Retrieve feature flag. Do not include "FEATURE_FLAG_" inside of\n            // the variable fetch. The EnvFetcher handles this automatically\n            flag, err := h.EnvFetcher().GetBooleanFlagForUser(context.Background(), appCtx, "MULTI_MOVE", map[string]string{})\n            if err != nil {\n                // Handle accordingly\n            }\n\n            if flag.Match != true {\n                // Handle accordingly (Basic example)\n                return mtoshipmentops.NewCreateMTOAgentForbidden(), nil\n            }\n')),(0,r.yg)("p",null,"Flag will look something like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'Entity:\n"7e302e56-a8b4-4801-8015-9b7fa113ec5b"\nKey:\n"MULTI_MOVE" // Notice how FEATURE_FLAG_ is not included\nMatch:\ntrue\nVariant:\n"true"\nNamespace:\n"development"\n')))}m.isMDXComponent=!0}}]);