"use strict";(self.webpackChunkmymove_docs=self.webpackChunkmymove_docs||[]).push([[732],{87768:(e,t,a)=>{a.d(t,{c:()=>r});var n=a(11504),i=a(48080);const l={tabItem:"tabItem_Ymn6"};function r(e){let{children:t,hidden:a,className:r}=e;return n.createElement("div",{role:"tabpanel",className:(0,i.c)(l.tabItem,r),hidden:a},t)}},38888:(e,t,a)=>{a.d(t,{c:()=>w});var n=a(45072),i=a(11504),l=a(48080),r=a(53943),o=a(55592),s=a(10632),u=a(27128),c=a(21148);function d(e){return function(e){var t;return(null==(t=i.Children.map(e,(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:i}}=e;return{value:t,label:a,attributes:n,default:i}}))}function m(e){const{values:t,children:a}=e;return(0,i.useMemo)((()=>{const e=t??d(a);return function(e){const t=(0,u.w)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function g(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:a}=e;const n=(0,o.Uz)(),l=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,s._M)(l),(0,i.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(n.location.search);t.set(l,e),n.replace({...n.location,search:t.toString()})}),[l,n])]}function p(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,l=m(e),[r,o]=(0,i.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!g({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:l}))),[s,u]=h({queryString:a,groupId:n}),[d,p]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,l]=(0,c.IN)(a);return[n,(0,i.useCallback)((e=>{a&&l.set(e)}),[a,l])]}({groupId:n}),b=(()=>{const e=s??d;return g({value:e,tabValues:l})?e:null})();(0,i.useLayoutEffect)((()=>{b&&o(b)}),[b]);return{selectedValue:r,selectValue:(0,i.useCallback)((e=>{if(!g({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),p(e)}),[u,p,l]),tabValues:l}}var b=a(93664);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:t,block:a,selectedValue:o,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,r.MV)(),m=e=>{const t=e.currentTarget,a=c.indexOf(t),n=u[a].value;n!==o&&(d(t),s(n))},g=e=>{var t;let a=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;a=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;a=c[t]??c[c.length-1];break}}null==(t=a)||t.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.c)("tabs",{"tabs--block":a},t)},u.map((e=>{let{value:t,label:a,attributes:r}=e;return i.createElement("li",(0,n.c)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>c.push(e),onKeyDown:g,onClick:m},r,{className:(0,l.c)("tabs__item",y.tabItem,null==r?void 0:r.className,{"tabs__item--active":o===t})}),a??t)})))}function v(e){let{lazy:t,children:a,selectedValue:n}=e;const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===n));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function k(e){const t=p(e);return i.createElement("div",{className:(0,l.c)("tabs-container",y.tabList)},i.createElement(f,(0,n.c)({},e,t)),i.createElement(v,(0,n.c)({},e,t)))}function w(e){const t=(0,b.c)();return i.createElement(k,(0,n.c)({key:String(t)},e))}},10716:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>c,default:()=>b,frontMatter:()=>u,metadata:()=>d,toc:()=>g});var n=a(45072),i=(a(11504),a(95788)),l=(a(10880),a(38888)),r=a(87768),o=a(43252),s=a.n(o);const u={},c="CSV File Importing",d={unversionedId:"getting-started/okta/csv-import",id:"getting-started/okta/csv-import",title:"CSV File Importing",description:"When a MilMove Office or Admin user is created within the MilMove application (not Okta), they will also need an account created in Okta. This will need to be done within the Okta Admin Console by an Okta Admin with the appropriate privileges.",source:"@site/docs/getting-started/okta/02-csv-import.md",sourceDirName:"getting-started/okta",slug:"/getting-started/okta/csv-import",permalink:"/mymove-docs/docs/getting-started/okta/csv-import",draft:!1,editUrl:"https://github.com/transcom/mymove-docs/edit/main/docs/getting-started/okta/02-csv-import.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"gettingStartedSidebar",previous:{title:"Okta Admins",permalink:"/mymove-docs/docs/getting-started/okta/okta-admins"},next:{title:"Okta Troubleshooting",permalink:"/mymove-docs/docs/getting-started/okta/okta-troubleshooting"}},m={},g=[{value:"CSV File Example",id:"csv-file-example",level:3},{value:"Double Check - Triple Check",id:"double-check---triple-check",level:3},{value:"Importing CSV File into Okta",id:"importing-csv-file-into-okta",level:2}],h={toc:g},p="wrapper";function b(e){let{components:t,...a}=e;return(0,i.yg)(p,(0,n.c)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"csv-file-importing"},"CSV File Importing"),(0,i.yg)("p",null,"When a MilMove Office or Admin user is created within the MilMove application ",(0,i.yg)("strong",{parentName:"p"},"(not Okta)"),", they will also need an account created in Okta. This will need to be done within the ",(0,i.yg)("strong",{parentName:"p"},"Okta Admin Console")," by an Okta Admin with the appropriate privileges."),(0,i.yg)("admonition",{type:"info"},(0,i.yg)("p",{parentName:"admonition"},"You can find more info about Okta Admins ",(0,i.yg)("strong",{parentName:"p"},(0,i.yg)("a",{parentName:"strong",href:"/mymove-docs/docs/getting-started/okta/okta-admins"},"HERE")))),(0,i.yg)("p",null,"When importing a CSV file to create or update any user, Okta requires the columns to be ones they recognize in the respective Okta profile. When filling out a CSV file, it should look like this:"),(0,i.yg)("h3",{id:"csv-file-example"},"CSV File Example"),(0,i.yg)(s(),{mdxType:"CodeBlock"},"email,login,firstName,lastName,cac_edipi,gsa_id,role",(0,i.yg)("br",null),"officeUser@email.com,officeUser@email.com,John,Office,1231231231,,office",(0,i.yg)("br",null),"adminUser@email.com,adminUser@email.com,Jill,Admin,2342342342,,admin",(0,i.yg)("br",null),"gsaUser@gsa.gov,gsaUser@gsa.gov,Jimmy,GSA,,3453453453453,office",(0,i.yg)("br",null),"hybridUser@email.gov,hybridUser@email.gov,Susy,Hybrid,,5675675675,hybrid",(0,i.yg)("br",null),"homeSafeUser@homesafe.com,homeSafeUser@homesafe.com,Home,Safe,,e417b7452d1fbbb6cef6f1ba8dcf25f5186dac4e,office",(0,i.yg)("br",null)),"This file contains all the columns that we need and will use in Okta. There are a bunch more properties that Okta uses for a profile, but these are the only ones we need for MilMove.",(0,i.yg)("admonition",{type:"info"},(0,i.yg)("p",{parentName:"admonition"},"Right now MilMove's configuration in Okta supports the following root certificate & their respective chains:",(0,i.yg)("br",null),"\nCA-3",(0,i.yg)("br",null),"\nEntrust Managed Services Root CA",(0,i.yg)("br",null),"\nECA Root CA 4")),(0,i.yg)("br",null),"Let's break down what values go in what in the CSV file:",(0,i.yg)(l.c,{mdxType:"Tabs"},(0,i.yg)(r.c,{label:"email",value:"email",default:!0,mdxType:"TabItem"},"This will be the same as ",(0,i.yg)("b",null,"login"),", but it's imperative that this email is the primary email of the user and should be a ",(0,i.yg)("b",null,"functional")," email."),(0,i.yg)(r.c,{label:"login",value:"login",mdxType:"TabItem"},"This will be the same as ",(0,i.yg)("b",null,"email")," and will also need to be a ",(0,i.yg)("b",null,"functional")," email."),(0,i.yg)(r.c,{label:"firstName",value:"firstName",mdxType:"TabItem"},"First name of the user."),(0,i.yg)(r.c,{label:"lastName",value:"lastName",mdxType:"TabItem"},"Last name of the user."),(0,i.yg)(r.c,{label:"cac_edipi",value:"cac_edipi",mdxType:"TabItem"},"This will be the DoDID/EDIPI number that is located on the user's Smart Card. This number should only be ",(0,i.yg)("b",null,"ten digits")," in length and must be ",(0,i.yg)("b",null,"unique"),". Okta will not allow this user to be imported if this number already exists in their database. This can be left empty if the office user does not use a CAC."),(0,i.yg)(r.c,{label:"gsa_id",value:"gsa_id",mdxType:"TabItem"},"This column is specific for GSA users or ECA cert users (only in staging environment) and they will need to provide values that can be found in their certificate. ",(0,i.yg)("br",null),(0,i.yg)("br",null),(0,i.yg)("b",null,"For GSA Users"),(0,i.yg)("br",null),"It is variable in length, but can be found in the ",(0,i.yg)("b",null,"Subject Alternative Name")," property in their certificate and are the numbers to the left of their ",(0,i.yg)("b",null,"@gsa.gov")," email found in that property. This can be empty when importing users that are not GSA users.",(0,i.yg)("br",null),(0,i.yg)("br",null),(0,i.yg)("b",null,"For ECA Certificate Users"),(0,i.yg)("br",null),"For ECA certificate users we are using the ",(0,i.yg)("b",null,"Subject Key Identifier")," value in their certificate. This is a very long string that looks like: ",(0,i.yg)(s(),{mdxType:"CodeBlock"},"e417b7452d1fbbb6cef6f1ba8dcf25f5186dac4e")),(0,i.yg)(r.c,{label:"role",value:"role",mdxType:"TabItem"},"This will determine which groups the user is assigned to upon import. ",(0,i.yg)("b",null,"This field is required"),". The values in this column assign users to their respective groups, which allows for access to the application.",(0,i.yg)(s(),{mdxType:"CodeBlock"},"office -> assigns to office group",(0,i.yg)("br",null),"admin -> assigns to admin group",(0,i.yg)("br",null),"hybrid -> assigns to BOTH office and admin groups",(0,i.yg)("br",null)))),(0,i.yg)("h3",{id:"double-check---triple-check"},"Double Check - Triple Check"),(0,i.yg)("admonition",{type:"danger"},(0,i.yg)("p",{parentName:"admonition"},"If the ",(0,i.yg)("inlineCode",{parentName:"p"},"cac_edipi")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"gsa_id")," is wrong, the user will not be able to log in. Additionally, please make sure that the value in the ",(0,i.yg)("inlineCode",{parentName:"p"},"role")," column is either ",(0,i.yg)("inlineCode",{parentName:"p"},"office"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"admin"),", or ",(0,i.yg)("inlineCode",{parentName:"p"},"hybrid")," and all lowercase. Please make sure to double check these values prior to importing.",(0,i.yg)("br",null),(0,i.yg)("br",null),"\nGSA & ECA Certificate chains use the ",(0,i.yg)("inlineCode",{parentName:"p"},"gsa_id")," column",(0,i.yg)("br",null),"\nAnyone using CA-3 root certificates uses the ",(0,i.yg)("inlineCode",{parentName:"p"},"cac_edipi")," column")),(0,i.yg)("h2",{id:"importing-csv-file-into-okta"},"Importing CSV File into Okta"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Sign into the Okta Dashboard"),(0,i.yg)("li",{parentName:"ol"},"Click the ",(0,i.yg)("inlineCode",{parentName:"li"},"Admin")," button in the top right to go to the Admin Console"),(0,i.yg)("li",{parentName:"ol"},"In the nav bar on the left, click ",(0,i.yg)("inlineCode",{parentName:"li"},"Directory")),(0,i.yg)("li",{parentName:"ol"},"Click ",(0,i.yg)("inlineCode",{parentName:"li"},"People")," to open the users page"),(0,i.yg)("li",{parentName:"ol"},"There's a dropdown box that says ",(0,i.yg)("inlineCode",{parentName:"li"},"More actions"),", click that"),(0,i.yg)("li",{parentName:"ol"},"A dropdown menu will show, click ",(0,i.yg)("inlineCode",{parentName:"li"},"Import users from CSV")),(0,i.yg)("li",{parentName:"ol"},"Select the CSV file and click ",(0,i.yg)("inlineCode",{parentName:"li"},"Upload CSV")),(0,i.yg)("li",{parentName:"ol"},"Okta will check the headers to make sure it knows where to put the data, if successful - you'll see a success message",(0,i.yg)("br",null),"\nIf it was NOT successful, Okta will show an error message and tell you what it doesn't recognize"),(0,i.yg)("li",{parentName:"ol"},"Click ",(0,i.yg)("inlineCode",{parentName:"li"},"Next")),(0,i.yg)("li",{parentName:"ol"},"If the user will only be logging in with their CAC, check both boxes since they won't need a password (this is for office users)",(0,i.yg)("br",null),"\nIf the user will be an Okta Admin and will need to sign in with additional authenticators, only check the top box since they'll need to log into Okta"),(0,i.yg)("li",{parentName:"ol"},"If the user in each row doesn't exist - Okta will create an account for them",(0,i.yg)("br",null),"\nIf the user does exist, Okta will update their profile with the values in the CSV file"),(0,i.yg)("li",{parentName:"ol"},"Now each user will be able to authenticate with Okta (as long as the information in the file is correct)!")))}b.isMDXComponent=!0}}]);