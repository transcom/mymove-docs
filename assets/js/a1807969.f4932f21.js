"use strict";(self.webpackChunkmymove_docs=self.webpackChunkmymove_docs||[]).push([[1118],{16174:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>i});var n=t(58168),r=(t(96540),t(15680));t(41873);const s={},o=void 0,l={unversionedId:"backend/testing/testing-handlers",id:"backend/testing/testing-handlers",title:"testing-handlers",description:"Test Setup",source:"@site/docs/backend/testing/testing-handlers.md",sourceDirName:"backend/testing",slug:"/backend/testing/testing-handlers",permalink:"/mymove-docs/docs/backend/testing/testing-handlers",draft:!1,editUrl:"https://github.com/transcom/mymove-docs/edit/main/docs/backend/testing/testing-handlers.md",tags:[],version:"current",frontMatter:{},sidebar:"backendSidebar",previous:{title:"Manually run Prime API for Slice demo",permalink:"/mymove-docs/docs/backend/testing/manually-run-prime-api-for-slice-demo"}},p={},i=[{value:"Test Setup",id:"test-setup",level:2},{value:"Inspecting the response",id:"inspecting-the-response",level:2}],d={toc:i},g="wrapper";function u(e){let{components:a,...t}=e;return(0,r.yg)(g,(0,n.A)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"test-setup"},"Test Setup"),(0,r.yg)("p",null,"Most handler tests require the same boilerplate code and setup steps."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Create the necessary models in the DB. For example:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-golang"},"move := testdatagen.MakeDefaultMove(suite.DB())\norder := move.Orders\n"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Set up the Body of the HTTP request if creating or updating a model:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-golang"},'body := &ghcmessages.UpdateOrderPayload{\n    Sac: handlers.FmtString("987654321"),\n}\n'))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Define the request:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-golang"},'request := httptest.NewRequest("PATCH", "/orders/{orderID}", nil)\n'))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Set up the params:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-golang"},"params := orderop.UpdateOrderParams{\n    HTTPRequest: request,\n    OrderID:     strfmt.UUID(order.ID.String()),\n    IfMatch:     etag.GenerateEtag(order.UpdatedAt),\n    Body:        body,\n}\n"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Set up the context:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-golang"},"context := handlers.NewHandlerConfig(suite.DB(), suite.TestLogger())\n"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Set up the handler:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-golang"},"handler := UpdateOrderHandler{\n    context,\n    orderservice.NewOrderUpdater(suite.DB()),\n}\n"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Validate the Body. This runs the Swagger validation against the generated params before passing to the handler, which is what happens when the real endpoint is hit."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-golang"},"suite.NoError(params.Body.Validate(strfmt.Default))\n"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Finally make the request:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-golang"},"response := handler.Handle(params)\n")))),(0,r.yg)("p",null,"To test the response, make sure to test all the fields that you expect to be present. For example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-golang"},"response := handler.Handle(params)\nsuite.IsNotErrResponse(response)\norderOK := response.(*orderop.GetOrderOK)\nordersPayload := orderOK.Payload\n\nsuite.Assertions.IsType(&orderop.GetOrderOK{}, response)\nsuite.Equal(order.ID.String(), ordersPayload.ID.String())\nsuite.Equal(move.Locator, ordersPayload.MoveCode)\nsuite.NotNil(order.NewDutyStation)\nsuite.NotZero(order.OriginDutyStation)\nsuite.NotZero(ordersPayload.DateIssued)\n")),(0,r.yg)("p",null,"Note that the expected order of arguments to ",(0,r.yg)("inlineCode",{parentName:"p"},"suite.Equal")," is ",(0,r.yg)("inlineCode",{parentName:"p"},"(expected, actual)"),". The payload attributes should always be on the right. This makes it easier to troubleshoot.\nWhenever a value is known, we want to prefer checking explicitly for the value using ",(0,r.yg)("inlineCode",{parentName:"p"},"suite.Equal"),"\nor ",(0,r.yg)("inlineCode",{parentName:"p"},"suite.EqualValues"),".\nRead the ",(0,r.yg)("a",{parentName:"p",href:"/mymove-docs/docs/backend/testing/testing-best-practices"},"Testing Best Practices")," for more guidance."),(0,r.yg)("h2",{id:"inspecting-the-response"},"Inspecting the response"),(0,r.yg)("p",null,"Because we use Swagger to generate API code, each handler has its own response ",(0,r.yg)("inlineCode",{parentName:"p"},"type"),"\nfor each defined HTTP status. For example, when the status is 200, the ",(0,r.yg)("inlineCode",{parentName:"p"},"UpdateOrder"),"\nhandler has a response ",(0,r.yg)("inlineCode",{parentName:"p"},"type")," of ",(0,r.yg)("inlineCode",{parentName:"p"},"orderop.UpdateOrderOK{}"),".\nTo get the payload of the response, you have to do something like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-golang"},"payload := response.(*orderop.UpdateOrderOK).Payload\n")),(0,r.yg)("p",null,"Then you can fetch the various attributes, such as ",(0,r.yg)("inlineCode",{parentName:"p"},"payload.MoveCode"),"."),(0,r.yg)("p",null,"If you're used to web frameworks like Rails, you might prefer to inspect the payload as\nJSON for debugging. Here's how to parse the response as JSON:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-golang"},'payload := response.(*orderop.UpdateOrderOK).Payload\njsonPayload, errJSONMarshall := json.Marshal(payload)\nif errJSONMarshall != nil {\n  fmt.Println("failed to parse payload as JSON")\n}\nfmt.Println(string(jsonPayload))\n')))}u.isMDXComponent=!0}}]);