"use strict";(self.webpackChunkmymove_docs=self.webpackChunkmymove_docs||[]).push([[2296],{80292:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var n=a(45072),o=(a(11504),a(95788));a(10880);const r={},l="How to Set Up a Frontend Feature Flag",i={unversionedId:"frontend/guides/set-up-a-feature-flag",id:"frontend/guides/set-up-a-feature-flag",title:"How to Set Up a Frontend Feature Flag",description:"See how to implement an experimental backend feature flag (Without Flipt) here",source:"@site/docs/frontend/guides/set-up-a-feature-flag.md",sourceDirName:"frontend/guides",slug:"/frontend/guides/set-up-a-feature-flag",permalink:"/mymove-docs/docs/frontend/guides/set-up-a-feature-flag",draft:!1,editUrl:"https://github.com/transcom/mymove-docs/edit/main/docs/frontend/guides/set-up-a-feature-flag.md",tags:[],version:"current",frontMatter:{},sidebar:"frontendSidebar",previous:{title:"How to Track New Events in Move History",permalink:"/mymove-docs/docs/frontend/guides/how-to-add-move-history-events"},next:{title:"Using Modals",permalink:"/mymove-docs/docs/frontend/guides/using-modals"}},p={},d=[{value:"Frontend",id:"frontend",level:2},{value:"Overview",id:"overview",level:3},{value:"How to create a new flag",id:"how-to-create-a-new-flag",level:3},{value:"How to apply the flag in a component",id:"how-to-apply-the-flag-in-a-component",level:3},{value:"Context method",id:"context-method",level:4},{value:"Detect flags method",id:"detect-flags-method",level:4}],g={toc:d},s="wrapper";function m(e){let{components:t,...a}=e;return(0,o.yg)(s,(0,n.c)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"how-to-set-up-a-frontend-feature-flag"},"How to Set Up a Frontend Feature Flag"),(0,o.yg)("admonition",{type:"info"},(0,o.yg)("p",{parentName:"admonition"},"See how to implement an experimental backend feature flag (Without Flipt) ",(0,o.yg)("a",{parentName:"p",href:"/mymove-docs/docs/backend/guides/how-to/add-an-experimental-feature-flag"},"here"))),(0,o.yg)("p",null,"There is a feature flag feature for both frontend and backend.  Here's how to set up a new feature flag."),(0,o.yg)("h2",{id:"frontend"},"Frontend"),(0,o.yg)("h3",{id:"overview"},"Overview"),(0,o.yg)("p",null,"The frontend feature flag can be turned on or off through the URL. By appending\na query string ",(0,o.yg)("inlineCode",{parentName:"p"},"?flag:flagName=false"),", the feature will be turned off and\nappending ",(0,o.yg)("inlineCode",{parentName:"p"},"?flag:flagName=true")," will turn on the feature. Generally, while\nworking on a feature that is not ready for production, by default we set it to\noff in production and turn it on in dev, staging, and experimental environments."),(0,o.yg)("h3",{id:"how-to-create-a-new-flag"},"How to create a new flag"),(0,o.yg)("p",null,"Go to ",(0,o.yg)("inlineCode",{parentName:"p"},"shared/featureFlag.js")),(0,o.yg)("p",null,"Add a key/value to ",(0,o.yg)("inlineCode",{parentName:"p"},"defaultFlags")," and set it to ",(0,o.yg)("inlineCode",{parentName:"p"},"false"),". The key will be the\nname you use in the URL."),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"myFeatureFlag")," --\x3e ",(0,o.yg)("inlineCode",{parentName:"p"},"?flag:myFeatureFlag=false")),(0,o.yg)("p",null,"Add the key/value to the environment flags where you want it different than the default"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"const environmentFlags = {development: Object.assign({}, defaultFlags, { myFeatureFlag: true })}\n")),(0,o.yg)("h3",{id:"how-to-apply-the-flag-in-a-component"},"How to apply the flag in a component"),(0,o.yg)("p",null,"Access the flag value through context"),(0,o.yg)("h4",{id:"context-method"},"Context method"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"To access context, import ",(0,o.yg)("inlineCode",{parentName:"p"},"withContext")),(0,o.yg)("pre",{parentName:"li"},(0,o.yg)("code",{parentName:"pre"},"import { withContext } from 'shared/AppContext';\n"))),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Wrap the exported component with ",(0,o.yg)("inlineCode",{parentName:"p"},"withContext")),(0,o.yg)("pre",{parentName:"li"},(0,o.yg)("code",{parentName:"pre"},"export default withContext(connect(mapStateToProps, mapDispatchToProps)(MyComponent));\n"))),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Pull the boolean value of the flag and apply it to the feature you want to show/hide"),(0,o.yg)("pre",{parentName:"li"},(0,o.yg)("code",{parentName:"pre"},"const showMyFeatureFlag = this.props.context.flags.myFeatureFlag;\n\n// OR\n\nconst showMyFeatureFlag = context.flags.myFeatureFlag;\n")))),(0,o.yg)("h4",{id:"detect-flags-method"},"Detect flags method"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Import detectFlags"),(0,o.yg)("pre",{parentName:"li"},(0,o.yg)("code",{parentName:"pre"},"import { detectFlags } from 'utils/featureFlags';\n"))),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Assign flags to a constant"),(0,o.yg)("pre",{parentName:"li"},(0,o.yg)("code",{parentName:"pre"},"const flags = detectFlags(process.env.NODE_ENV, window.location.host, window.location.search);\n"))),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Grab flag for use"),(0,o.yg)("pre",{parentName:"li"},(0,o.yg)("code",{parentName:"pre"},"flags.myFeatureFlag\n")))))}m.isMDXComponent=!0}}]);