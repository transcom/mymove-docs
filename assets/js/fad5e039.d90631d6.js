"use strict";(self.webpackChunkmymove_docs=self.webpackChunkmymove_docs||[]).push([[8924],{30299:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var a=t(87462),s=(t(67294),t(3905));t(8209);const o={sidebar_position:2},r="How To Call Swagger Endpoints from React",i={unversionedId:"frontend/guides/access-swagger-endpoints-from-react",id:"frontend/guides/access-swagger-endpoints-from-react",title:"How To Call Swagger Endpoints from React",description:"1. Verify the Schema is Defined",source:"@site/docs/frontend/guides/access-swagger-endpoints-from-react.md",sourceDirName:"frontend/guides",slug:"/frontend/guides/access-swagger-endpoints-from-react",permalink:"/mymove-docs/docs/frontend/guides/access-swagger-endpoints-from-react",draft:!1,editUrl:"https://github.com/transcom/mymove-docs/edit/main/docs/frontend/guides/access-swagger-endpoints-from-react.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"frontendSidebar",previous:{title:"Guide to Implementing UI",permalink:"/mymove-docs/docs/frontend/guides/guide-to-implementing-ui"},next:{title:"How to Create a Form using Formik",permalink:"/mymove-docs/docs/frontend/guides/create-a-form-using-formik"}},p={},d=[{value:"1. Verify the Schema is Defined",id:"1-verify-the-schema-is-defined",level:2},{value:"2. Call the Swagger Operation",id:"2-call-the-swagger-operation",level:2},{value:"3. Dispatch an Action when Component Mounts",id:"3-dispatch-an-action-when-component-mounts",level:2},{value:"4. Use a Selector to Access the Data",id:"4-use-a-selector-to-access-the-data",level:2},{value:"5. Handle Fetch Errors",id:"5-handle-fetch-errors",level:2}],l={toc:d},c="wrapper";function m(e){let{components:n,...t}=e;return(0,s.kt)(c,(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"how-to-call-swagger-endpoints-from-react"},"How To Call Swagger Endpoints from React"),(0,s.kt)("h2",{id:"1-verify-the-schema-is-defined"},"1. Verify the Schema is Defined"),(0,s.kt)("p",null,"For each model type returned by the backend, there needs to be an ",(0,s.kt)("inlineCode",{parentName:"p"},"Entity")," defined and exported in ",(0,s.kt)("inlineCode",{parentName:"p"},"src/shared/Entities/schema.js"),"."),(0,s.kt)("p",null,"Here is the definition for ",(0,s.kt)("inlineCode",{parentName:"p"},"Shipment"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"export const shipment = new schema.Entity('shipments');\n\n// add any embedded objects that should be extracted during normalization\nshipment.define({\n  pickup_address: address,\n  secondary_pickup_address: address,\n  delivery_address: address,\n  partial_sit_delivery_address: address,\n});\n\nexport const shipments = new schema.Array(shipment);\n")),(0,s.kt)("h2",{id:"2-call-the-swagger-operation"},"2. Call the Swagger Operation"),(0,s.kt)("p",null,"Add a function to ",(0,s.kt)("inlineCode",{parentName:"p"},"src/shared/Entities/modules/$MODEL.js")," that calls the ",(0,s.kt)("inlineCode",{parentName:"p"},"operationId")," defined in the\nswagger YAML. Action creator functions should take a ",(0,s.kt)("inlineCode",{parentName:"p"},"label")," argument, which will be used to allow the calling component to determine the status of any requests with that label."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"swaggerRequest")," returns a promise, so it is possible to chain behavior onto its result, for example to perform a few requests in sequence."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"import { swaggerRequest } from 'shared/Swagger/request';\nimport { getClient } from 'shared/Swagger/api';\n\nexport function getShipment(label, shipmentId, moveId) {\n  return swaggerRequest(\n    getClient,                  // function returning a promise that will resolve to a Swagger client instance\n    'shipments.getShipment',    // what operation to perform, including tag namespace\n    { moveId, shipmentId },     // parameters to pass to the operation\n    { label },                  // optional params for swaggerRequest, such as label\n  );\n}\n")),(0,s.kt)("p",null,"By directing all Swagger Client calls through the ",(0,s.kt)("inlineCode",{parentName:"p"},"swaggerRequest")," function, we can have a centralized place to manage how to track\nthe lifecycle of the request. This allows us to dispatch actions to Redux that represent these events, currently ",(0,s.kt)("inlineCode",{parentName:"p"},"@@swagger/${operation}/START"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"@@swagger/${operation}/SUCCESS")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"@@swagger/${operation}/FAILURE"),". These actions will appear in the Redux debugger along with any other state changes."),(0,s.kt)("h2",{id:"3-dispatch-an-action-when-component-mounts"},"3. Dispatch an Action when Component Mounts"),(0,s.kt)("p",null,"The following pattern, using ",(0,s.kt)("inlineCode",{parentName:"p"},"onDidMount"),", allows the data fetching to be defined outside the component."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"export class ShipmentDisplay extends Component {\n\n    componentDidMount() {\n        this.props.onDidMount && this.props.onDidMount();\n    }\n\n    render {\n        const { shipment } = this.props;\n\n        return (\n            <div>\n                <p>You are moving on { shipment.requested_move_date }.</p>\n            </div>\n        );\n    }\n}\n\nShipmentDisplay.propTypes = {\n    shipmentID: PropTypes.string.isRequired,\n\n    onDidMount: PropTypes.function,\n    shipment: PropTypes.object,\n};\n\nconst requestLabel = 'ShipmentDisplay.getShipment';\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n    return {\n        onDidMount: function() {\n            dispatch(getShipment(requestLabel, ownProps.shipmentID));        }\n    };\n}\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    shipment: selectShipment(ownProps.shipmentID),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShipmentDisplay);\n")),(0,s.kt)("p",null,"If you need to load data based on a value that isn't passed in as a ",(0,s.kt)("inlineCode",{parentName:"p"},"prop"),", it's best to embed another component and pass that value into it as a ",(0,s.kt)("inlineCode",{parentName:"p"},"prop"),". This can be thought of as an extension of the container pattern."),(0,s.kt)("h2",{id:"4-use-a-selector-to-access-the-data"},"4. Use a Selector to Access the Data"),(0,s.kt)("p",null,"All data access should be done through selectors and not by directly accessing the global Redux state."),(0,s.kt)("p",null,"Add a function to ",(0,s.kt)("inlineCode",{parentName:"p"},"src/shared/Entities/modules/$MODEL.js")," that returns the value from Redux. This example uses ",(0,s.kt)("inlineCode",{parentName:"p"},"denormalize"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// Return a shipment identified by its ID\nexport function selectShipment(state, id) {\n  if (!id) {\n    return null;\n  }\n  return denormalize([id], shipments, state.entities)[0];\n}\n")),(0,s.kt)("p",null,"This one returns a value that doesn't need ",(0,s.kt)("inlineCode",{parentName:"p"},"denormalize"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// Return a shipment identified by its ID\nexport function selectShipment(state, id) {\n  if (!id) {\n    return null;\n  }\n  return get(state, `entities.shipments.${id}`);\n}\n")),(0,s.kt)("h2",{id:"5-handle-fetch-errors"},"5. Handle Fetch Errors"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"lastError")," selector provides access to the last error for a specified request label."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"import { lastError } from 'shared/Swagger/selectors';\n\nexport class ShipmentDisplay extends Component {\n\n    componentDidMount() {\n        this.props.onDidMount && this.props.onDidMount();\n    }\n\n    render {\n        const { shipment, error } = this.props;\n\n        return (\n            { error && <p>An error has occurred.</p> }\n\n            <div>\n                <p>You are moving on { shipment.requested_move_date }.</p>\n            </div>\n        );\n    }\n}\n\nShipmentDisplay.propTypes = {\n    shipmentID: PropTypes.string.isRequired,\n\n    onDidMount: PropTypes.function,\n    shipment: PropTypes.object,\n    error: PropTypes.object,\n};\n\nconst requestLabel = 'ShipmentDisplay.getShipment';\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n    return {\n        onDidMount: function() {\n            dispatch(getShipment(requestLabel, ownProps.shipmentID));\n        }\n    };\n}\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    shipment: selectShipment(ownProps.shipmentID),\n    error: lastError(state, requestLabel),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShipmentDisplay);\n")))}m.isMDXComponent=!0}}]);