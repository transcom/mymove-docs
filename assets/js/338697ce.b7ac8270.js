"use strict";(self.webpackChunkmymove_docs=self.webpackChunkmymove_docs||[]).push([[2e3],{90132:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>g,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var a=n(87462),i=(n(67294),n(3905));n(8209);const s={title:"0036 Use Separate Integration Package for Go Integration Tests",description:"Decision outcome: Move integration tests to separate package and flag the\nsuite with testing.Short\n"},r="Use Separate Integration Package for Go Integration Tests",o={unversionedId:"adrs/go-integration",id:"adrs/go-integration",title:"0036 Use Separate Integration Package for Go Integration Tests",description:"Decision outcome: Move integration tests to separate package and flag the\nsuite with testing.Short\n",source:"@site/docs/adrs/0036-go-integration.md",sourceDirName:"adrs",slug:"/adrs/go-integration",permalink:"/mymove-docs/docs/adrs/go-integration",draft:!1,editUrl:"https://github.com/transcom/mymove-docs/edit/main/docs/adrs/0036-go-integration.md",tags:[],version:"current",sidebarPosition:36,frontMatter:{title:"0036 Use Separate Integration Package for Go Integration Tests",description:"Decision outcome: Move integration tests to separate package and flag the\nsuite with testing.Short\n"},sidebar:"adrsSidebar",previous:{title:"0035 Use Query Builder for Admin Interface",permalink:"/mymove-docs/docs/adrs/use-query-builder"},next:{title:"0037 Put mymove outside of standard GOPATH",permalink:"/mymove-docs/docs/adrs/go-path-and-project-layout-revisited"}},l={},d=[{value:"Considered Alternatives",id:"considered-alternatives",level:2},{value:"Decision Outcome",id:"decision-outcome",level:2},{value:"Pros and Cons of the Alternatives",id:"pros-and-cons-of-the-alternatives",level:2},{value:"Run integration in same suite as handlers and flag with <code>testing.Short</code>",id:"run-integration-in-same-suite-as-handlers-and-flag-with-testingshort",level:3},{value:"Use separate suites for integration tests, but within handlers package",id:"use-separate-suites-for-integration-tests-but-within-handlers-package",level:3},{value:"Move integration tests to separate package and flag the suite with <code>testing.Short</code>",id:"move-integration-tests-to-separate-package-and-flag-the-suite-with-testingshort",level:3}],p={toc:d},u="wrapper";function g(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"use-separate-integration-package-for-go-integration-tests"},"Use Separate Integration Package for Go Integration Tests"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"User Story:")),(0,i.kt)("p",null,"MilMove Engineers have started to decouple parts of the Go codebase.\nNamely, we now have a core setup of\n",(0,i.kt)("inlineCode",{parentName:"p"},"publicapi")," (similarly ",(0,i.kt)("inlineCode",{parentName:"p"},"internalapi")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"adminapi"),"), ",(0,i.kt)("inlineCode",{parentName:"p"},"services"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"models"),".\nThis helps us decouple implementations in each of those layers\nand better unit test specific functionality."),(0,i.kt)("p",null,"One of the reasons for adding ",(0,i.kt)("inlineCode",{parentName:"p"},"services"),"\nwas to speed up handler tests by mocking service implementations\nand removing the constant setup and tear down of the database.\nHowever, by mocking services,\nwe lose the integration style testing that our previous handler tests supplied.\nThese are the tests that ran against the handler,\nexecuting all the code as if it were production with no mocking.\nBecause of the unit testing style changes with services,\nold integration tests are being run in tandem with new mocked handler unit tests\n(causing performance issues)\nor not being written for new code\n(causing code quality/safety issues)."),(0,i.kt)("p",null,"This ADR looks to address the gaps created by mock driven unit tests\nand create a strategy for organizing integration tests on critical code paths.\nIt does ",(0,i.kt)("strong",{parentName:"p"},"not")," answer the question of what we should be integration testing."),(0,i.kt)("p",null,"Note that we are also not referring to Cypress end-to-end tests\nwhich are sometimes referred to as integration tests."),(0,i.kt)("h2",{id:"considered-alternatives"},"Considered Alternatives"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Run integration in same suite as handlers and flag with ",(0,i.kt)("inlineCode",{parentName:"strong"},"testing.Short")))),(0,i.kt)("p",null,"An example of the suite setup and test:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'// SetupTest sets up the test suite by preparing the DB\nfunc (suite *HandlerSuite) SetupTest() {\n  if !testing.Short() {\n\n  suite.DB().TruncateAll()\n  }\n}\n\nfunc (suite *HandlerSuite) TestCreateShipmentHandlerEmpty() {\n  if testing.Short() {\n      suite.T().Skip("Skip database integration test")\n  }\n  // Rest of test\n}\n')),(0,i.kt)("p",null,"Tests would be run with ",(0,i.kt)("inlineCode",{parentName:"p"},"go test -short"),"\nif developers need quick unit testing in development environments.\nOr synonymously with a ",(0,i.kt)("inlineCode",{parentName:"p"},"make server_test -short")," target."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Use separate suites for integration tests, but within handlers package"))),(0,i.kt)("p",null,"In this example,\nintegration tests would use ",(0,i.kt)("inlineCode",{parentName:"p"},"IntegrationHandlerSuite"),"\nand the existing ",(0,i.kt)("inlineCode",{parentName:"p"},"HandlerSuite")," would no longer have database tests requiring setup/teardown."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Move integration tests to separate package and flag the suite with ",(0,i.kt)("inlineCode",{parentName:"strong"},"testing.Short")))),(0,i.kt)("p",null,"In this example,\nwe move all tests requiring external dependencies (database, APIs) to an ",(0,i.kt)("inlineCode",{parentName:"p"},"integration")," package.\nThis package would have its own suite."),(0,i.kt)("p",null,"The suite test would be prefaced as follows so that it can be excluded with ",(0,i.kt)("inlineCode",{parentName:"p"},"-short"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'func TestHandlerSuite(t *testing.T) {\n  if testing.Short() {\n      suite.T().Skip("Skip database integration test")\n  }\n  // rest of suite instantiation\n}\n')),(0,i.kt)("h2",{id:"decision-outcome"},"Decision Outcome"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Chosen Alternative: ",(0,i.kt)("strong",{parentName:"li"},"Move integration tests to separate package and flag the suite with ",(0,i.kt)("inlineCode",{parentName:"strong"},"testing.Short")))),(0,i.kt)("p",null,"Moving all dependency wiring to a separate package allows unit tests to stay decoupled from dependencies.\nNamely, ",(0,i.kt)("inlineCode",{parentName:"p"},"handlers")," is only required to pull in packages that mimics an interface dependency based production structure\nthat our service layer pushes to achieve.\nIntegration tests then become more synonymous with wiring up our webserver with dependencies.\n",(0,i.kt)("inlineCode",{parentName:"p"},"Short()")," tests are also easier to reason about at the package/suite,\nrather than test level."),(0,i.kt)("h2",{id:"pros-and-cons-of-the-alternatives"},"Pros and Cons of the Alternatives"),(0,i.kt)("h3",{id:"run-integration-in-same-suite-as-handlers-and-flag-with-testingshort"},"Run integration in same suite as handlers and flag with ",(0,i.kt)("inlineCode",{parentName:"h3"},"testing.Short")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"+")," Keeps current structure of tests (no migration)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"+")," Integration tests live close to their unit counterparts,\nincreasing developer awareness."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-")," Dependency packages are imported into handlers package for testing.\nNote that this currently happens in ",(0,i.kt)("inlineCode",{parentName:"li"},"api.go"),",\nbut individual handlers are unaware of dependency implementations."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-")," Suite setup/teardown happen on the suite level,\nbut short flagging would be required within individual tests and suite setup.\nIn other words, short logic would be sparse across tests.")),(0,i.kt)("h3",{id:"use-separate-suites-for-integration-tests-but-within-handlers-package"},"Use separate suites for integration tests, but within handlers package"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"+")," Integration tests live close to their unit counterparts,\nincreasing developer awareness."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"+")," Short flagging happens on suite/package level."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-")," Dependency packages are imported into handlers package for testing.\nNote that this currently happens in ",(0,i.kt)("inlineCode",{parentName:"li"},"api.go"),",\nbut individual handlers are unaware of dependency implementations."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-")," Multiple suites in a single package can be confusing.")),(0,i.kt)("h3",{id:"move-integration-tests-to-separate-package-and-flag-the-suite-with-testingshort"},"Move integration tests to separate package and flag the suite with ",(0,i.kt)("inlineCode",{parentName:"h3"},"testing.Short")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"+")," Integration tests with dependencies are clearly marked and easily tested as separate from unit tests.\nDependencies are no longer imported for unit tests."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"+")," Short flagging happens on suite/package level.\nTests can also be run per directory."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-")," Requires developer awareness.\nThis might be moot,\nas our current instructions for testing with services ignore integration tests.")))}g.isMDXComponent=!0}}]);