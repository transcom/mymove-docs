"use strict";(self.webpackChunkmymove_docs=self.webpackChunkmymove_docs||[]).push([[5809],{30845:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>k,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var n=o(87462),a=(o(67294),o(3905));o(8209);const r={sidebar_position:1},i="How To Generate Mocks with Mockery",s={unversionedId:"tools/mockery/generate-mocks-with-mockery",id:"tools/mockery/generate-mocks-with-mockery",title:"How To Generate Mocks with Mockery",description:"Mockery provides the ability to easily generate mocks for golang interfaces. It removes the boilerplate coding required to use mocks.",source:"@site/docs/tools/mockery/generate-mocks-with-mockery.md",sourceDirName:"tools/mockery",slug:"/tools/mockery/generate-mocks-with-mockery",permalink:"/mymove-docs/docs/tools/mockery/generate-mocks-with-mockery",draft:!1,editUrl:"https://github.com/transcom/mymove-docs/edit/main/docs/tools/mockery/generate-mocks-with-mockery.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"toolsSidebar",previous:{title:"API Parsers",permalink:"/mymove-docs/docs/tools/locust/api-parsers"},next:{title:"Setting up Postman",permalink:"/mymove-docs/docs/tools/postman/setting-up-postman"}},c={},m=[{value:"Auto-generating mocks with <code>go generate</code>",id:"auto-generating-mocks-with-go-generate",level:2},{value:"Using Mocks",id:"using-mocks",level:2}],p={toc:m},l="wrapper";function k(e){let{components:t,...o}=e;return(0,a.kt)(l,(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"how-to-generate-mocks-with-mockery"},"How To Generate Mocks with Mockery"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/vektra/mockery"},"Mockery")," provides the ability to easily generate mocks for golang interfaces. It removes the boilerplate coding required to use mocks."),(0,a.kt)("p",null," ",(0,a.kt)("em",{parentName:"p"},"In Golang, mocks can only be created on interfaces - not structs. So, it is important that for whichever mock you are trying to generate, it should correspond to the appropriate interface.")),(0,a.kt)("h2",{id:"auto-generating-mocks-with-go-generate"},"Auto-generating mocks with ",(0,a.kt)("inlineCode",{parentName:"h2"},"go generate")),(0,a.kt)("p",null," The ",(0,a.kt)("inlineCode",{parentName:"p"},"make mocks_generate")," command will regenerate mocks for all interfaces tagged with the appropriate ",(0,a.kt)("inlineCode",{parentName:"p"},"go generate")," command. To add an interface to the list of auto-generated mocks, just add a\n",(0,a.kt)("inlineCode",{parentName:"p"},"go:generate")," comment like below and update the name with your interface name."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-.go"},"// AccessCodeClaimer is the service object interface for ValidateAccessCode\n//go:generate mockery -name AccessCodeClaimer\ntype AccessCodeClaimer interface {\n    ClaimAccessCode(code string, serviceMemberID uuid.UUID) (*models.AccessCode, *validate.Errors, error)\n}\n")),(0,a.kt)("h2",{id:"using-mocks"},"Using Mocks"),(0,a.kt)("p",null,"When you use the mock type, you need to know two things:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"What you expect to receive as input."),(0,a.kt)("li",{parentName:"ol"},"What you expect to receive as output.")),(0,a.kt)("admonition",{title:"Pointers in Mocks",type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"These should be defined as exactly as possible to preserve the integrity of your test. If you have to include pointer\ninput, you must ",(0,a.kt)("em",{parentName:"p"},"always")," use copies of the pointer and ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"never, ever use that specific pointer again")),". Otherwise,\nyou could unknowingly change the input you expect and your test would be compromised."),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"If you are unsure about the inputs/returns for a mock, you should not use a mock."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Example test mock"',title:'"Example',test:!0,'mock"':!0},'reweigh := testdatagen.MakeDefaultReweigh(suite.DB())\nreweighCopy := *reweigh // make sure the copy is a value, not a pointer\n\nupdater := mocks.NewReweighUpdater(suite.T())\n\nupdater.On("UpdateReweigh",\n    mock.AnythingOfType("appcontext.AppContext"), // you can include as many input parameters\n    mock.AnythingOfType("*models.Reweigh")        // as you need\n).Return(reweighCopy, nil)\n')),(0,a.kt)("p",null,"Note that this calls the generated mock function, ",(0,a.kt)("em",{parentName:"p"},"not")," the original."),(0,a.kt)("admonition",{title:"More mocking",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"MockedInterface.On()")," to mock a method. "),(0,a.kt)("p",{parentName:"admonition"},"Mocks also have a ",(0,a.kt)("inlineCode",{parentName:"p"},"AssertExpectations")," method to validate expectations, such as parameter type and number of times the\nmethod was called. When you use ",(0,a.kt)("inlineCode",{parentName:"p"},"mocks.New<MockedThing>"),", it automatically sets it up to call ",(0,a.kt)("inlineCode",{parentName:"p"},"AssertExpectations"),"\nat the end."),(0,a.kt)("p",{parentName:"admonition"},"See ",(0,a.kt)("a",{parentName:"p",href:"https://godoc.org/github.com/stretchr/testify/mock#Call.On"},"testify's docs")," for more information.")))}k.isMDXComponent=!0}}]);