"use strict";(self.webpackChunkmymove_docs=self.webpackChunkmymove_docs||[]).push([[884],{89584:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>g,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>r});var o=n(45072),i=(n(11504),n(95788));n(10880);const a={},g="Logging",s={unversionedId:"getting-started/development/logging",id:"getting-started/development/logging",title:"Logging",description:"We are using zap as a logger in this project. We currently rely on its built-in NewDevelopment() and NewProduction() default configs, which are enabled in any of the executable packages that live in cmd.",source:"@site/docs/getting-started/development/logging.md",sourceDirName:"getting-started/development",slug:"/getting-started/development/logging",permalink:"/mymove-docs/docs/getting-started/development/logging",draft:!1,editUrl:"https://github.com/transcom/mymove-docs/edit/main/docs/getting-started/development/logging.md",tags:[],version:"current",frontMatter:{},sidebar:"gettingStartedSidebar",previous:{title:"How to Create & Submit a Pull Request (PR)",permalink:"/mymove-docs/docs/getting-started/development/how-to-create-and-submit-PR"},next:{title:"Makefile",permalink:"/mymove-docs/docs/getting-started/development/makefile"}},l={},r=[{value:"Log files",id:"log-files",level:2}],p={toc:r},d="wrapper";function m(e){let{components:t,...n}=e;return(0,i.yg)(d,(0,o.c)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"logging"},"Logging"),(0,i.yg)("p",null,"We are using ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/uber-go/zap"},"zap")," as a logger in this project. We currently rely on its built-in ",(0,i.yg)("inlineCode",{parentName:"p"},"NewDevelopment()")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"NewProduction()")," default configs, which are enabled in any of the executable packages that live in ",(0,i.yg)("inlineCode",{parentName:"p"},"cmd"),"."),(0,i.yg)("p",null,"This means that logging ",(0,i.yg)("em",{parentName:"p"},"is not")," set up from within models or other packages unless the files in ",(0,i.yg)("inlineCode",{parentName:"p"},"cmd")," are also being loaded. ",(0,i.yg)("em",{parentName:"p"},"If you attempt to call ",(0,i.yg)("inlineCode",{parentName:"em"},"zap.L()")," or ",(0,i.yg)("inlineCode",{parentName:"em"},"zap.S()")," without a configured logger, nothing will appear on the screen.")),(0,i.yg)("p",null,"If you need to see some output during the development process (say, for debugging purposes), it is best to use the standard lib ",(0,i.yg)("inlineCode",{parentName:"p"},"fmt")," package to print to the screen. You will also need to pass ",(0,i.yg)("inlineCode",{parentName:"p"},"-v")," to ",(0,i.yg)("inlineCode",{parentName:"p"},"go test")," so that it prints all output, even from passing tests. The simplest way to do this is to run ",(0,i.yg)("inlineCode",{parentName:"p"},"go test")," yourself by passing it which files to run, e.g. ",(0,i.yg)("inlineCode",{parentName:"p"},"go test pkg/models/* -v"),"."),(0,i.yg)("h2",{id:"log-files"},"Log files"),(0,i.yg)("p",null,"In development mode, logs from the ",(0,i.yg)("inlineCode",{parentName:"p"},"milmove")," process are written to ",(0,i.yg)("inlineCode",{parentName:"p"},"logs/dev.log"),"."))}m.isMDXComponent=!0}}]);