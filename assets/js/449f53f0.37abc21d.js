"use strict";(self.webpackChunkmymove_docs=self.webpackChunkmymove_docs||[]).push([[2042],{35975:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>p});var a=n(87462),s=(n(67294),n(3905));n(8209);const o={sidebar_position:8},i="TaskSet",r={unversionedId:"tools/locust/taskset",id:"tools/locust/taskset",title:"TaskSet",description:"Tasks are distinct functions, or callables, that tell Locust what to do during load testing. A task",source:"@site/docs/tools/locust/taskset.md",sourceDirName:"tools/locust",slug:"/tools/locust/taskset",permalink:"/mymove-docs/docs/tools/locust/taskset",draft:!1,editUrl:"https://github.com/transcom/mymove-docs/edit/main/docs/tools/locust/taskset.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"toolsSidebar",previous:{title:"Locustfile",permalink:"/mymove-docs/docs/tools/locust/locustfile"},next:{title:"Adding or Editing Load Tests",permalink:"/mymove-docs/docs/tools/locust/adding-or-editing-load-tests"}},l={},p=[{value:"Logging In As A Customer or Office User",id:"logging-in-as-a-customer-or-office-user",level:2},{value:"Expected Failures",id:"expected-failures",level:2}],u={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,s.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"taskset"},"TaskSet"),(0,s.kt)("p",null,"Tasks are distinct functions, or callables, that tell Locust what to do during load testing. A task\nis, in essence, a load test. ",(0,s.kt)("inlineCode",{parentName:"p"},"TaskSet")," classes are a way to link tasks together and keep the code\norganized. Task sets and functions should all be defined in python files in the ",(0,s.kt)("inlineCode",{parentName:"p"},"tasks/")," directory."),(0,s.kt)("p",null,"It is possible for a user class to have more than one task set, but it's important to keep in mind\nis that if a user has more than one task set, they will only ever switch between the task sets if\nyou remember to have the task set stop at some point. Otherwise, the user will just stay stuck on\ntheir first task set until the load tests end. It is also important to note that if a user has more than\none ",(0,s.kt)("inlineCode",{parentName:"p"},"TaskSet"),", the one they pick is random. The ",(0,s.kt)("inlineCode",{parentName:"p"},"TaskSets")," will have weights that affect how likely each\none is to be picked, which can be set as needed to modify the probability of each one being picked.\nAn example of a user with multiple ",(0,s.kt)("inlineCode",{parentName:"p"},"TaskSets")," will be included below."),(0,s.kt)("p",null,"An example ",(0,s.kt)("inlineCode",{parentName:"p"},"TaskSet")," for this project might be:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'# -*- coding: utf-8 -*-\n"""\nExample of a TaskSet file...\n"""\nimport logging\nfrom http import HTTPStatus\n\nfrom locust import tag, task\n\nfrom utils.request import log_response_failure, log_response_info\nfrom utils.rest import RestResponseContextManager\nfrom utils.task import RestTaskSet\n\n\nlogger = logging.getLogger(__name__)\n\n\n# tags are useful to add at a TaskSet and task level to enable running only specific load tests.\n@tag(\'mainTasks\')\nclass PrimeTasks(RestTaskSet):\n    """\n    Description of the flow for these tasks here.\n    """\n\n    @task\n    def stop(self) -> None:\n        """\n        This ensures that at some point, the user will stop running the tasks in this task set.\n        """\n        self.interrupt()\n        \n    @tag(\'doSomething\')\n    @task\n    def do_something(self) -> None:\n        """\n        Do a task! Tasks generally have three steps: Set-up, make a request, validate/log results\n        """\n        # Prep the path and request kwargs. Using "1" for the moveID for the sake of simplicity here,\n        # but in a regular load test, you would need to have some way of getting this.\n        moves_path, request_kwargs = self.request_preparer.prep_prime_request(\n          endpoint="/move-task-orders/1", endpoint_name="/move-task-orders/{moveID}"\n        )\n        \n        # Now make the request\n        with self.rest(method="GET", url=moves_path, **request_kwargs) as resp:\n            # This will let our editors know that we expect `resp` to be an instance of\n            # `RestResponseContextManager`, which then lets it know what type hints to suggest below.\n            resp: RestResponseContextManager\n        \n            # This function helps us log the response status code uniformly across requests.\n            log_response_info(response=resp)\n            \n            if resp.status_code == HTTPStatus.OK:\n                logger.info(f"\\n\u2139\ufe0f {resp.js=}\\n")\n            else:\n                # This function helps us log info about the response and request when there are errors.\n                log_response_failure(response=resp)\n            \n                # if you wanted to, you could mark this load test as a failure by doing this:\n                resp.failure("Move not found!")\n')),(0,s.kt)("p",null,"Note that we are using the ",(0,s.kt)("inlineCode",{parentName:"p"},"RestTaskSet")," as our parent class. It enables easier testing and more\ncontrol over whether a load test should be considered a success or failure. Among the things it\nprovides are the ",(0,s.kt)("inlineCode",{parentName:"p"},"self.request_preparer")," object and ",(0,s.kt)("inlineCode",{parentName:"p"},"self.rest")," context manager."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"request_preparer")," is an instance of the helper class mentioned earlier called\n",(0,s.kt)("inlineCode",{parentName:"p"},"MilMoveRequestPreparer")," and has several helper functions for preparing to make a request to the\n",(0,s.kt)("inlineCode",{parentName:"p"},"mymove")," server:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"prep_ghc_request")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"prep_internal_request")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"prep_prime_request")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"prep_support_request"))),(0,s.kt)("p",null,"Each of these takes an endpoint, e.g. ",(0,s.kt)("inlineCode",{parentName:"p"},"/move-task-orders/1")," (like in the example above). They can\nalso optionally take an ",(0,s.kt)("inlineCode",{parentName:"p"},"endpoint_name")," argument that is useful for the purposes of locust request\ngrouping. So in the example above, we use ",(0,s.kt)("inlineCode",{parentName:"p"},'endpoint_name="/move-task-orders/{moveID}"'),". That way\ninstead of ",(0,s.kt)("inlineCode",{parentName:"p"},"locust")," having each request to an endpoint like ",(0,s.kt)("inlineCode",{parentName:"p"},"/move-task-orders/{moveID}")," be its own\ngroup, e.g. ",(0,s.kt)("inlineCode",{parentName:"p"},"/move-task-orders/1")," , ",(0,s.kt)("inlineCode",{parentName:"p"},"/move-task-orders/2"),", etc., ",(0,s.kt)("inlineCode",{parentName:"p"},"locust")," will group them all under\nthe same name."),(0,s.kt)("p",null,"Each of these functions will return a tuple containing the URL to use (stored in ",(0,s.kt)("inlineCode",{parentName:"p"},"moves_path"),"\nabove), and the keyword arguments (or kwargs, called ",(0,s.kt)("inlineCode",{parentName:"p"},"request_kwargs")," above) to pass to ",(0,s.kt)("inlineCode",{parentName:"p"},"self.rest"),"."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"rest")," context manager makes it easier to work with responses by:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"providing a variable you can use (called ",(0,s.kt)("inlineCode",{parentName:"li"},"resp")," above) to mark the load test as a success (by\ncalling ",(0,s.kt)("inlineCode",{parentName:"li"},"resp.success()"),") or a failure (",(0,s.kt)("inlineCode",{parentName:"li"},'resp.failure("message")')," like at the end of the example)."),(0,s.kt)("li",{parentName:"ul"},"automatically parsing the response content into ",(0,s.kt)("inlineCode",{parentName:"li"},"json")," and failing the load test if it can't be\nparsed. The parsed ",(0,s.kt)("inlineCode",{parentName:"li"},"json")," response content can be accessed in ",(0,s.kt)("inlineCode",{parentName:"li"},"resp.js"),".",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"In an example earlier, you can see ",(0,s.kt)("inlineCode",{parentName:"li"},"parse_response_json")," being used. The context manager uses\nthat internally to populate ",(0,s.kt)("inlineCode",{parentName:"li"},"resp.js"),"."),(0,s.kt)("li",{parentName:"ul"},"This isn't called ",(0,s.kt)("inlineCode",{parentName:"li"},"resp.json")," because that's already a method on the ",(0,s.kt)("inlineCode",{parentName:"li"},"resp")," object."))),(0,s.kt)("li",{parentName:"ul"},"automatically catching of any exceptions that may be raised in your ",(0,s.kt)("inlineCode",{parentName:"li"},"with")," block, which will then\nmark the load test as a failure and format an error message to display in the results.")),(0,s.kt)("p",null,"Also note that we included a ",(0,s.kt)("inlineCode",{parentName:"p"},"stop")," task that means at some point, that task will be selected and\nthe task set will end, passing control back to the parent. In our case this means the user class,\nbut locust does allow nested task sets, in which case it would give control back to the parent task\nset."),(0,s.kt)("p",null,"One last thing to point out is that we used the ",(0,s.kt)("inlineCode",{parentName:"p"},"@task")," decorator for the ",(0,s.kt)("inlineCode",{parentName:"p"},"TaskSet"),"'s\nmethods/functions. This is the key part that turns the methods into load tests. Any methods that\ndon't have the ",(0,s.kt)("inlineCode",{parentName:"p"},"@task")," decorator will be regular methods that the ",(0,s.kt)("inlineCode",{parentName:"p"},"TaskSet")," has access to."),(0,s.kt)("p",null,"For more details on ",(0,s.kt)("inlineCode",{parentName:"p"},"TaskSet"),"s, see the\n",(0,s.kt)("a",{parentName:"p",href:"https://docs.locust.io/en/stable/tasksets.html"},"locust TaskSet class docs"),"."),(0,s.kt)("p",null,"You can link a ",(0,s.kt)("inlineCode",{parentName:"p"},"User")," class with a task set by passing the task set to the ",(0,s.kt)("inlineCode",{parentName:"p"},"User"),"'s ",(0,s.kt)("inlineCode",{parentName:"p"},"tasks"),"\nattribute like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'# -*- coding: utf-8 -*-\n"""\nExample of a TaskSet file...\n"""\nfrom locust import HttpUser, between\n\nfrom tasks.prime import PrimeTasks, SupportTasks\n\n\nclass MyUser(HttpUser):\n    """\n    A user that can test things...\n    """\n    \n    tasks = {PrimeTasks: 5, SupportTasks: 1}\n    # The time (in seconds) Locust waits in between tasks. Can use decimals.\n    wait_time = between(0.25, 9)\n')),(0,s.kt)("p",null,"The number next to the task set indicates its relative ",(0,s.kt)("em",{parentName:"p"},"weight")," - so in this example, tasks\nfrom ",(0,s.kt)("inlineCode",{parentName:"p"},"PrimeTasks")," would be 5 times more likely than tasks from ",(0,s.kt)("inlineCode",{parentName:"p"},"SupportTasks"),"."),(0,s.kt)("h2",{id:"logging-in-as-a-customer-or-office-user"},"Logging In As A Customer or Office User"),(0,s.kt)("p",null,"If you need to be logged in for the load tests, we have a helper function to create users in\n",(0,s.kt)("inlineCode",{parentName:"p"},"utils/auth.py")," called ",(0,s.kt)("inlineCode",{parentName:"p"},"create_user"),". You can use it during the ",(0,s.kt)("inlineCode",{parentName:"p"},"on_start")," method of a ",(0,s.kt)("inlineCode",{parentName:"p"},"TaskSet"),"\nlike this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'# -*- coding: utf-8 -*-\n"""\nExample of a task set using the LoginTaskSet functionality.\n"""\nimport logging\n\nfrom locust import task\n\nfrom utils.auth import UserType, create_user\nfrom utils.task import RestTaskSet\n\n\nlogger = logging.getLogger(__name__)\n\n\nclass MyLoggedInTasks(RestTaskSet):\n    """\n    Tasks to run that require logging in to the office/ghc or customer/internal APIs.\n    """\n\n    def on_start(self) -> None:\n        """\n        Creates a login right at the start of the TaskSet and stops task execution if the login\n        fails.\n        """\n        success = create_user(request_preparer=self.request_preparer, session=self.client,\n                              user_type=UserType.MILMOVE)\n        \n        if not success:\n            logger.error("Failed to create a user")\n            self.interrupt()\n\n    @task\n    def stop(self) -> None:\n        """\n        This ensures that at some point, the user will stop running the tasks in this task set.\n        """\n        self.interrupt()\n')),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"request_preparer")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"session")," are available already on ",(0,s.kt)("inlineCode",{parentName:"p"},"RestTaskSet")," instances, so the main\nthing you need to provide is the ",(0,s.kt)("inlineCode",{parentName:"p"},"user_type")," you want to create."),(0,s.kt)("p",null,"There are multiple other ways to organize and link tasks together, but using our ",(0,s.kt)("inlineCode",{parentName:"p"},"RestTaskSet")," class\nis the main recommendation in this repo."),(0,s.kt)("h2",{id:"expected-failures"},"Expected Failures"),(0,s.kt)("p",null,"There may be times that you want to create a load test that you expect to fail. E.g. if you want a\nload test to cover an endpoint that will reject the request because of some error (eTag, bad data,\netc.). If you want to do that, you can do something like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'# -*- coding: utf-8 -*-\n"""\nExample of a TaskSet file...\n"""\nimport json\nimport logging\nfrom http import HTTPStatus\n\nfrom locust import tag, task\n\nfrom utils.constants import MTO_SHIPMENT\nfrom utils.parsers import APIKey, get_api_fake_data_generator\nfrom utils.request import log_response_failure, log_response_info\nfrom utils.rest import RestResponseContextManager\nfrom utils.task import RestTaskSet\n\n\nlogger = logging.getLogger(__name__)\nfake_data_generator = get_api_fake_data_generator()\n\n\n# tags are useful to add at a TaskSet and task level to enable running only specific load tests.\n@tag(\'mainTasks\')\nclass PrimeTasks(RestTaskSet):\n    """\n    Description of the flow for these tasks here.\n    """\n\n    @task\n    def stop(self) -> None:\n        """\n        This ensures that at some point, the user will stop running the tasks in this task set.\n        """\n        self.interrupt()\n\n    # You can add the expectedFailure tag so that they can all be run if needed.\n    @tag(MTO_SHIPMENT, "updateMTOShipmentStatus", "expectedFailure")\n    @task\n    def update_mto_shipment_with_invalid_status(self) -> None:\n        """\n        Tries updating an MTO shipment to an invalid status.\n        """\n        # For the sake of brevity, this example won\'t include the full setup. You can look at the real\n        # PrimeTasks.update_mto_shipment_with_invalid_status method to see the full version.\n    \n        # This is not how a real mto_shipment would look, but just doing this for the sake of this\n        # example.\n        mto_shipment = {\'id\': \'TEST123\', \'eTag\': 12354519}\n    \n        # This is an invalid status for a shipment to change to through this endpoint.\n        overrides = {"status": "DRAFT"}\n    \n        # Generate fake payload based on the endpoint\'s required fields\n        payload = fake_data_generator.generate_fake_request_data(\n            api_key=APIKey.PRIME,\n            path="/mto-shipments/{mtoShipmentID}/status",\n            method="patch",\n            overrides=overrides,\n        )\n    \n        # Note that we have an em dash plus "expected failure" to put these in a separate locust group\n        # than the regular shipment status updates.\n        url, request_kwargs = self.request_preparer.prep_prime_request(\n            endpoint=f"/mto-shipments/{mto_shipment[\'id\']}/status",\n            endpoint_name="/mto-shipments/{mtoShipmentID}/status \u2014 expected failure",\n        )\n    \n        request_kwargs["headers"]["If-Match"] = mto_shipment["eTag"]\n    \n        with self.rest(method="PATCH", url=url, data=json.dumps(payload), **request_kwargs) as resp:\n            resp: RestResponseContextManager\n            \n            log_response_info(response=resp)\n            \n            if resp.status_code == HTTPStatus.UNPROCESSABLE_ENTITY:\n                # Note that by default, locust would fail this request because its status code is > 400 so\n                # we need to explicitly mark it as a failure.\n                resp.success()\n            else:\n                # If we get any other status code, we didn\'t get the expected request failure, so let\'s mark\n                # it as a load test failure.\n                resp.failure("Got an unexpected result for updating a shipment with an invalid status.")\n                \n                log_response_failure(response=resp)\n')),(0,s.kt)("p",null,"The main things to note are:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Adding a tag for expected failures: ",(0,s.kt)("inlineCode",{parentName:"li"},"expectedFailure")),(0,s.kt)("li",{parentName:"ul"},"Appending ",(0,s.kt)("inlineCode",{parentName:"li"},"\u2014 expected failure")," to the ",(0,s.kt)("inlineCode",{parentName:"li"},"endpoint_name"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Note that if it's an endpoint you would not normally have to specify the ",(0,s.kt)("inlineCode",{parentName:"li"},"endpoint_name")," for,\ne.g. ",(0,s.kt)("inlineCode",{parentName:"li"},"/moves"),", you'll need to specify ",(0,s.kt)("inlineCode",{parentName:"li"},"endpoint_name=/moves \u2014 expected failure"),"."))),(0,s.kt)("li",{parentName:"ul"},"Checking for the bad status code you expect, e.g. ",(0,s.kt)("inlineCode",{parentName:"li"},"HTTPStatus.UNPROCESSABLE_ENTITY"),", a.k.a. ",(0,s.kt)("inlineCode",{parentName:"li"},"422"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Using ",(0,s.kt)("inlineCode",{parentName:"li"},"resp.success()")," if you got the expected bad status code."),(0,s.kt)("li",{parentName:"ul"},"Using ",(0,s.kt)("inlineCode",{parentName:"li"},"resp.failure(<reason>)")," and ",(0,s.kt)("inlineCode",{parentName:"li"},"log_response_failure(response=resp)")," if you get any other\nstatus code.")))))}m.isMDXComponent=!0}}]);