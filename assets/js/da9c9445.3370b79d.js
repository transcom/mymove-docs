"use strict";(self.webpackChunkmymove_docs=self.webpackChunkmymove_docs||[]).push([[1974],{58577:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>m});var a=n(87462),o=(n(67294),n(3905));n(8209);const i={},l="Goland",r={unversionedId:"about/development/goland",id:"about/development/goland",title:"Goland",description:"GoLand supports",source:"@site/docs/about/development/goland.md",sourceDirName:"about/development",slug:"/about/development/goland",permalink:"/mymove-docs/docs/about/development/goland",draft:!1,editUrl:"https://github.com/transcom/mymove-docs/edit/main/docs/about/development/goland.md",tags:[],version:"current",frontMatter:{},sidebar:"aboutSidebar",previous:{title:"Environment Variables",permalink:"/mymove-docs/docs/about/development/environment-variables"},next:{title:"How to Create & Submit a Pull Request (PR)",permalink:"/mymove-docs/docs/about/development/how-to-create-and-submit-PR"}},d={},m=[{value:"Goland: Nix",id:"goland-nix",level:2}],p={toc:m},s="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(s,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"goland"},"Goland"),(0,o.kt)("p",null,"GoLand supports\n",(0,o.kt)("a",{parentName:"p",href:"https://blog.jetbrains.com/go/2019/02/06/debugging-with-goland-getting-started/#debugging-a-running-application-on-the-local-machine"},"attaching the debugger to a running process"),",\nhowever this requires that the server has been built with specific flags. If you wish to use this feature in\ndevelopment add the following line ",(0,o.kt)("inlineCode",{parentName:"p"},"export GOLAND=1")," to your ",(0,o.kt)("inlineCode",{parentName:"p"},".envrc.local"),". Once the server starts follow the steps\noutlined in the article above and you should now be able to set breakpoints using the GoLand debugger."),(0,o.kt)("h2",{id:"goland-nix"},"Goland: Nix"),(0,o.kt)("p",null,"To get Goland to play nicely with ",(0,o.kt)("inlineCode",{parentName:"p"},"nix"),", there's a few things you can set up:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Update ",(0,o.kt)("inlineCode",{parentName:"li"},"GOROOT")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"/nix/var/nix/profiles/mymove/bin/go"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Note that once you add it, Goland will resolve it to the actual path (the one above is a link), so it\u2019ll look\nsomething like ",(0,o.kt)("inlineCode",{parentName:"li"},"/nix/store/rv16prybnsmav8w1sqdgr80jcwsja98q-go-1.19.3/bin/go")))),(0,o.kt)("li",{parentName:"ul"},"Update ",(0,o.kt)("inlineCode",{parentName:"li"},"GOPATH")," to point to the ",(0,o.kt)("inlineCode",{parentName:"li"},".gopath")," dir in the ",(0,o.kt)("inlineCode",{parentName:"li"},"mymove")," repo",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"You may need to create the ",(0,o.kt)("inlineCode",{parentName:"li"},".gopath")," dir yourself."))),(0,o.kt)("li",{parentName:"ul"},"Update Node and NPM:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Node interpreter: ",(0,o.kt)("inlineCode",{parentName:"li"},"/nix/var/nix/profiles/mymove/bin/node")),(0,o.kt)("li",{parentName:"ul"},"Package manager:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"This might be fixed automatically, but if not, you can point it ",(0,o.kt)("inlineCode",{parentName:"li"},"/nix/var/nix/profiles/mymove/bin/yarn")),(0,o.kt)("li",{parentName:"ul"},"Similar to ",(0,o.kt)("inlineCode",{parentName:"li"},"GOROOT"),", it will resolve to something that looks like\n",(0,o.kt)("inlineCode",{parentName:"li"},"/nix/store/cnmxp5isc3ck1bm11zryy8dnsbnm87wk-yarn-1.22.10/libexec/yarn"))))))))}u.isMDXComponent=!0}}]);