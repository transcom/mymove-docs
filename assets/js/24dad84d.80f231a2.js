"use strict";(self.webpackChunkmymove_docs=self.webpackChunkmymove_docs||[]).push([[7876],{31084:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var i=t(45072),a=(t(11504),t(95788));t(10880);const o={},l="Testing DTOD",r={unversionedId:"integrations/dtod/testing-dtod",id:"integrations/dtod/testing-dtod",title:"Testing DTOD",description:"The instructions that follow will say to change the environment variable inside of .envrc, however, there are other methods one can take to update to environment variables.",source:"@site/docs/integrations/dtod/testing-dtod.md",sourceDirName:"integrations/dtod",slug:"/integrations/dtod/testing-dtod",permalink:"/mymove-docs/docs/integrations/dtod/testing-dtod",draft:!1,editUrl:"https://github.com/transcom/mymove-docs/edit/main/docs/integrations/dtod/testing-dtod.md",tags:[],version:"current",frontMatter:{},sidebar:"integrationsSidebar",previous:{title:"DTOD Architecture",permalink:"/mymove-docs/docs/integrations/dtod/dtod-architecture"},next:{title:"GEX",permalink:"/mymove-docs/docs/backend/guides/gex"}},g={},d=[{value:"Triggering the DTOD Call",id:"triggering-the-dtod-call",level:2},{value:"With Mocks",id:"with-mocks",level:2},{value:"Using Real DTOD",id:"using-real-dtod",level:2},{value:"Changing the Password Locally",id:"changing-the-password-locally",level:3},{value:"Locally Getting Additional Logging",id:"locally-getting-additional-logging",level:2},{value:"Challenges with Getting Additional Logging",id:"challenges-with-getting-additional-logging",level:3}],s={toc:d},p="wrapper";function c(e){let{components:n,...t}=e;return(0,a.yg)(p,(0,i.c)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"testing-dtod"},"Testing DTOD"),(0,a.yg)("p",null,"The instructions that follow will say to change the environment variable inside of ",(0,a.yg)("inlineCode",{parentName:"p"},".envrc"),", however, there are other methods one can take to update to environment variables."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Environment variables can be changed inside of ",(0,a.yg)("inlineCode",{parentName:"li"},".envrc.local")),(0,a.yg)("li",{parentName:"ul"},"Runing ",(0,a.yg)("inlineCode",{parentName:"li"},"export DTOD_USE_MOCK=false")," after ",(0,a.yg)("inlineCode",{parentName:"li"},"direnv allow")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"DTOD_USE_MOCK=false make server_run"))),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"If you are not using the plugin ",(0,a.yg)("a",{parentName:"p",href:"https://plugins.jetbrains.com/plugin/19275-better-direnv"},"better-direnv")," and you are running the server in Goland, be sure to refresh the Goland environment.")),(0,a.yg)("h2",{id:"triggering-the-dtod-call"},"Triggering the DTOD Call"),(0,a.yg)("p",null,"The following steps just documents one way in which DTOD is used in the application. There are others."),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"Login as a services counselor to the office application."),(0,a.yg)("li",{parentName:"ol"},"Create a PPM shipment."),(0,a.yg)("li",{parentName:"ol"},"The save and continue button should trigger a call to the DTOD API.")),(0,a.yg)("h2",{id:"with-mocks"},"With Mocks"),(0,a.yg)("p",null,"Ensure that ",(0,a.yg)("inlineCode",{parentName:"p"},"DTOD_USE_MOCK")," is set to ",(0,a.yg)("inlineCode",{parentName:"p"},"false")," in ",(0,a.yg)("inlineCode",{parentName:"p"},".envrc"),". Setting this to false will use mock caluclations."),(0,a.yg)("h2",{id:"using-real-dtod"},"Using Real DTOD"),(0,a.yg)("p",null,"Set ",(0,a.yg)("inlineCode",{parentName:"p"},"DTOD_USE_MOCK")," in ",(0,a.yg)("inlineCode",{parentName:"p"},".envrc")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),"."),(0,a.yg)("p",null,"In the server logs, you should see this line"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'2023-02-23T23:30:59.174Z INFO route/planner.go:167 Using real DTOD for DTOD route planner {"git_branch": "main", "git_commit": "d19fedae045252bc8f0116b1a7b216b4a1dc8927"}\n')),(0,a.yg)("h3",{id:"changing-the-password-locally"},"Changing the Password Locally"),(0,a.yg)("p",null,"The password can be overriden by running ",(0,a.yg)("inlineCode",{parentName:"p"},"export DTOD_API_PASSWORD='newpassword'")," after ",(0,a.yg)("inlineCode",{parentName:"p"},"direnv allow")," runs."),(0,a.yg)("admonition",{type:"caution"},(0,a.yg)("p",{parentName:"admonition"},"If the password contains special characters, ensure that they are escaped appropriately.")),(0,a.yg)("h2",{id:"locally-getting-additional-logging"},"Locally Getting Additional Logging"),(0,a.yg)("p",null,"Inside of ",(0,a.yg)("inlineCode",{parentName:"p"},"pkg/route/planner.go"),", change ",(0,a.yg)("inlineCode",{parentName:"p"},"gosoap.SoapClient")," to use ",(0,a.yg)("inlineCode",{parentName:"p"},"gosoap.SoapClientWithConfig")," like so"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"soapClient, err := gosoap.SoapClientWithConfig(dtodWSDL, httpClient, &gosoap.Config{Dump: true})\n")),(0,a.yg)("admonition",{type:"caution"},(0,a.yg)("p",{parentName:"admonition"},"The ",(0,a.yg)("inlineCode",{parentName:"p"},"Dump: true")," config option should only be used locally as that dumps out the username and password into the logs.")),(0,a.yg)("h3",{id:"challenges-with-getting-additional-logging"},"Challenges with Getting Additional Logging"),(0,a.yg)("p",null,"The soap library being used only returns an error if the status code is < 200 or >= 400."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/tiaguinho/gosoap/blob/f4a99995a898b6a2de86e74d0942ffc4cfa89c0d/soap.go#L251-L261.\n")))}c.isMDXComponent=!0}}]);