"use strict";(self.webpackChunkmymove_docs=self.webpackChunkmymove_docs||[]).push([[9966],{92582:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var t=n(58168),o=(n(96540),n(15680));n(41873);const l={},r="How to use Feature Flags",i={unversionedId:"tools/feature-flags/how-to-use-feature-flags",id:"tools/feature-flags/how-to-use-feature-flags",title:"How to use Feature Flags",description:"Introduction",source:"@site/docs/tools/feature-flags/how-to-use-feature-flags.md",sourceDirName:"tools/feature-flags",slug:"/tools/feature-flags/how-to-use-feature-flags",permalink:"/mymove-docs/docs/tools/feature-flags/how-to-use-feature-flags",draft:!1,editUrl:"https://github.com/transcom/mymove-docs/edit/main/docs/tools/feature-flags/how-to-use-feature-flags.md",tags:[],version:"current",frontMatter:{},sidebar:"toolsSidebar",previous:{title:"Redocusaurus",permalink:"/mymove-docs/docs/tools/docusaurus/redocusaurus"},next:{title:"Locust",permalink:"/mymove-docs/docs/tools/locust/"}},s={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Feature Flag Evaluation",id:"feature-flag-evaluation",level:3},{value:"MilMove Backend Feature Flag Service",id:"milmove-backend-feature-flag-service",level:3},{value:"MilMove Backend Feature Flag Swagger API",id:"milmove-backend-feature-flag-swagger-api",level:3},{value:"MilMove Frontend Feature Flag Component",id:"milmove-frontend-feature-flag-component",level:3},{value:"Example Feature Flag Usage",id:"example-feature-flag-usage",level:2},{value:"Backend Boolean Feature Flag Usage",id:"backend-boolean-feature-flag-usage",level:3},{value:"Backend Variant Feature Flag Usage",id:"backend-variant-feature-flag-usage",level:3},{value:"Frontend Defined Util for Feature Flag Logic",id:"frontend-defined-util-for-feature-flag-logic",level:3},{value:"Frontend Boolean Feature Flag Rendering",id:"frontend-boolean-feature-flag-rendering",level:3},{value:"Frontend Variant Feature Flag Rendering",id:"frontend-variant-feature-flag-rendering",level:3},{value:"Jest Testing Feature Flags",id:"jest-testing-feature-flags",level:2},{value:"Deploying Feature Flags",id:"deploying-feature-flags",level:2},{value:"Step by step",id:"step-by-step",level:3},{value:"Local Testing",id:"local-testing",level:3},{value:"CircleCI deployment flags",id:"circleci-deployment-flags",level:3},{value:"Updating feature flag deployments",id:"updating-feature-flag-deployments",level:2}],g={toc:u},p="wrapper";function d(e){let{components:a,...n}=e;return(0,o.yg)(p,(0,t.A)({},g,n,{components:a,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"how-to-use-feature-flags"},"How to use Feature Flags"),(0,o.yg)("h2",{id:"introduction"},"Introduction"),(0,o.yg)("p",null,"MilMove uses ",(0,o.yg)("a",{parentName:"p",href:"https://www.flipt.io"},"Flipt")," for feature flags. See ",(0,o.yg)("a",{parentName:"p",href:"/mymove-docs/docs/adrs/use-flipt-feature-flags"},"ADR 0082 Use Flipt for Feature Flags")," for why Flipt was chosen and ",(0,o.yg)("a",{parentName:"p",href:"/mymove-docs/docs/adrs/deploy-flipt-service-discovery"},"ADR 0084 Deploy Flipt using ECS service discovery")," for how Flipt is deployed in AWS."),(0,o.yg)("p",null,"While MilMove uses Flipt, it has a generic feature flag API that hides most of Flipt's implementation details. This allows environment variables to be used to simulate feature flags in local development without running a Flipt server. Additionally, this would also facilitate moving to another feature flag provider in the future should that be desirable."),(0,o.yg)("p",null,"The feature flag data is stored in a separate, private repository ",(0,o.yg)("inlineCode",{parentName:"p"},"transcom/milmove-feature-flags"),"."),(0,o.yg)("p",null,"As of 2023-09-06, feature flags have not been used for a full end to end feature deployment. This document may have some gaps because of that."),(0,o.yg)("h3",{id:"feature-flag-evaluation"},"Feature Flag Evaluation"),(0,o.yg)("p",null,"First, familiarize yourself with the key ",(0,o.yg)("a",{parentName:"p",href:"https://www.flipt.io/docs/concepts"},"Flipt Concepts"),"."),(0,o.yg)("p",null,"Each deployed environment (demo, exp, loadtest, stg, prd) is in its\nown ",(0,o.yg)("a",{parentName:"p",href:"https://www.flipt.io/docs/concepts#namespaces"},"Flipt Namespace")," and only that single namespace is available in each environment."),(0,o.yg)("p",null,"Flipt supports two kinds of feature flags:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.flipt.io/docs/concepts#boolean-flags"},"Boolean Flags")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.flipt.io/docs/concepts#variant-flags"},"Variant Flags"))),(0,o.yg)("p",null,"Boolean flags are for when a feature can only be turned on or off. Variant flags are for when a feature might have multiple options."),(0,o.yg)("p",null,"The most common ",(0,o.yg)("a",{parentName:"p",href:"https://www.flipt.io/docs/concepts#entities"},"Entity")," to work with is a user and that is probably how most feature flags will be used: to determine if a particular user should have access to a feature or not."),(0,o.yg)("p",null,"The ",(0,o.yg)("a",{parentName:"p",href:"https://www.flipt.io/docs/concepts#context"},"Context")," contains multiple bits of information that can by used by Flipt to determine if a feature should be available to a user or not."),(0,o.yg)("h3",{id:"milmove-backend-feature-flag-service"},"MilMove Backend Feature Flag Service"),(0,o.yg)("p",null,"We use the ",(0,o.yg)("a",{parentName:"p",href:"/mymove-docs/docs/backend/guides/service-objects/overview"},"backend service object")," for feature flags to wrap the specific endpoints in the Flipt API. This enables environment variable based feature flags in local development, with the additional benefit of protecting against any temporary unavailability on Flipt's end."),(0,o.yg)("p",null,"For development environments, the feature flag service object will utilize environment variables set in ",(0,o.yg)("inlineCode",{parentName:"p"},".envrc"),". This is because if a Flipt URL is not provided, it will default to the EnvFetcher service object. Internal endpoints to fetch the feature flag value will utilize the same service object, but return different values depending on environment and configuration."),(0,o.yg)("p",null,"The current APIs for in the backend are ",(0,o.yg)("inlineCode",{parentName:"p"},"GetBooleanFlagForUser")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"GetVariantFlagForUser"),". These methods have been added in ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/transcom/mymove/pull/11330"},"transcom/mymove#11330"),". The feature flag service object sets the ",(0,o.yg)("inlineCode",{parentName:"p"},"entityID")," for those requests to the ID of the user making the request. It populates some default information in the context, including:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"The application name (mil, office, admin)"),(0,o.yg)("li",{parentName:"ul"},"If the user is an admin user, service member, or office user"),(0,o.yg)("li",{parentName:"ul"},"The ",(0,o.yg)("a",{parentName:"li",href:"/mymove-docs/docs/backend/guides/roles-and-permissions"},"permissions")," of the user")),(0,o.yg)("p",null,"As we get more experience with feature flags, more information may be added to the default context of a user."),(0,o.yg)("p",null,"In addition, the API allows the caller to provide additional context that could be used for a specific feature flag."),(0,o.yg)("p",null,"For feature flags that are not specific to a particular user, use the ",(0,o.yg)("inlineCode",{parentName:"p"},"GetBooleanFlag")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"GetVariantFlag")," APIs for full customization of the ",(0,o.yg)("inlineCode",{parentName:"p"},"EntityID")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"Context"),". These methods have been added in ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/transcom/mymove/pull/11330"},"transcom/mymove#11330"),"."),(0,o.yg)("h3",{id:"milmove-backend-feature-flag-swagger-api"},"MilMove Backend Feature Flag Swagger API"),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"GetBooleanFlagForUse")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"GetVariantFlagForUser")," APIs are exposed in the internal API via the ",(0,o.yg)("inlineCode",{parentName:"p"},"/feature-flags/user-boolean/{key}")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"/feature-flags/user-variant/{key}")," endpoints so that the frontend can query feature flag status. These endpoints have been added in ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/transcom/mymove/pull/11330"},"transcom/mymove#11330"),"."),(0,o.yg)("h3",{id:"milmove-frontend-feature-flag-component"},"MilMove Frontend Feature Flag Component"),(0,o.yg)("p",null,"To allow for customizing the user presentation based on feature flags, we have a ",(0,o.yg)("inlineCode",{parentName:"p"},"FeatureFlag")," component that uses the internal API to query the feature flag status. Additionally, an asynchronous util function can be created to be reused for logic handling within components."),(0,o.yg)("h2",{id:"example-feature-flag-usage"},"Example Feature Flag Usage"),(0,o.yg)("h3",{id:"backend-boolean-feature-flag-usage"},"Backend Boolean Feature Flag Usage"),(0,o.yg)("p",null,"Imagine you have a new endpoint that adds new functionality that you\naren't ready to expose to every user. Add code to your handler that\nlooks like"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-go"},'\nconst newFeatureFlagName = "can-use-feature"\n\nfunc (h SomeNewHandler) Handle(params newfeatureop.FeatureParams) middleware.Responder {\n    return h.AuditableAppContextFromRequestWithErrors(params.HTTPRequest,\n        func(appCtx appcontext.AppContext) (middleware.Responder, error) {\n            canUseFeature := false\n            flag, err := h.FeatureFlagFetcher().GetBooleanFlagForUser(params.HTTPRequest.Context(), appCtx, newFeatureFlagName, map[string]string{})\n            if err != nil {\n                // Some error reaching the feature flag server. Log it\n                // and set the default to false\n                appCtx.Logger().Error("Error fetching feature flag", zap.String("featureFlagKey", newFeatureFlagName), zap.Error(err))\n                canUseFeature = false\n            } else {\n                // the request was successful\n                canUseFeature = flag.Match\n            }\n\n            if !canUseFeature {\n                return newfeatureop.NewFeatureForbidden(), nil\n            }\n\n      // the actual handler code goes here\n  }\n}\n\n')),(0,o.yg)("h3",{id:"backend-variant-feature-flag-usage"},"Backend Variant Feature Flag Usage"),(0,o.yg)("p",null,"Imagine you have want to have some parameter that is different per\nuser."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-go"},'\nconst newFeatureFlagName = "new-feature"\n\nfunc (h SomeNewHandler) Handle(params newfeatureop.FeatureParams) middleware.Responder {\n    return h.AuditableAppContextFromRequestWithErrors(params.HTTPRequest,\n        func(appCtx appcontext.AppContext) (middleware.Responder, error) {\n            defaultSize := 100\n            someThingSize := defaultSize\n            flag, err := h.FeatureFlagFetcher().GetVariantFlagForUser(params.HTTPRequest.Context(), appCtx, newFeatureFlagName, map[string]string{})\n            if err != nil {\n                // Some error reaching the feature flag server. Log it\n                // and set the default to false\n                appCtx.Logger().Error("Error fetching feature flag", zap.String("featureFlagKey", newFeatureFlagName), zap.Error(err))\n                someThingSize = defaultSize\n            } else {\n                // the request was successful\n                if flag.Match {\n                    someThingSize, err = strconv.Atoi(flag.Variant)\n                    if err != nil {\n                        someThingSize = defaultSize\n                    }\n                }\n            }\n\n            things := models.GetThings(appCtx.DB(), someThingSize)\n  }\n}\n\n')),(0,o.yg)("h3",{id:"frontend-defined-util-for-feature-flag-logic"},"Frontend Defined Util for Feature Flag Logic"),(0,o.yg)("p",null,"And once you have it created in envrc, navigate to the component you would like to implement feature flag logic for.\nThen, import your new function and use it"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},"import { isBooleanFlagEnabled } from '../../utils/featureFlags';\n")),(0,o.yg)("p",null,"For a class, add it to state and then call it in the ",(0,o.yg)("inlineCode",{parentName:"p"},"componentDidMount")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},"export class App extends Component {\n  constructor() {\n    this.state = {\n      featureFlag: false,\n    };\n  }\n\n\n  componentDidMount() {\n    isBooleanFlagEnabled('your_ff_here').then((enabled) => {\n      this.setState({\n        featureFlag: enabled,\n      });\n    });\n  }\n}\n\n")),(0,o.yg)("p",null,"For a function, call and assign it in the ",(0,o.yg)("inlineCode",{parentName:"p"},"useEffect")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},"const [yourFFHere, setYourFFHere] = useState();\n\nuseEffect(() => {\n  const fetchData = async () => {\n    isBooleanFlagEnlabed('your_ff_here').then((enabled) => {\n      setYourFFHere(enabled);\n    });\n  };\n  fetchData();\n}, [setErrorState]);\n")),(0,o.yg)("h3",{id:"frontend-boolean-feature-flag-rendering"},"Frontend Boolean Feature Flag Rendering"),(0,o.yg)("p",null,"Imagine you want to enable some new workflow only for certain users."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},"import { FeatureFlag } from 'components/FeatureFlag/FeatureFlag';\n\nexport const MyThing = () => {\n\n  const enabledThing = (\n    <div>\n      You can do the thing!\n    </div>\n  );\n\n  const disabledThing = (\n    <div>\n      Sorry, you can't do the thing.\n    </div>\n  );\n\n  const featureFlagRender = (flagValue) => {\n    if (flagValue === 'true') {\n      return enabledThing;\n    } else {\n      return disabledThing;\n    }\n  };\n\n   return <FeatureFlag flagKey=\"new-feature\" render={featureFlagRender} />;\n}\n")),(0,o.yg)("h3",{id:"frontend-variant-feature-flag-rendering"},"Frontend Variant Feature Flag Rendering"),(0,o.yg)("p",null,"Imagine you want to display different things to different users"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},"import { FeatureFlag } from 'components/FeatureFlag/FeatureFlag';\n\nexport const MyThing = () => {\n\n  const thingOne = (\n    <div>\n      This theme is Thing One!\n    </div>\n  );\n\n  const thingTwo = (\n    <div>\n      This theme is Thing Two!\n    </div>\n  );\n\n  const thingThree = (\n    <div>\n      This theme is Thing Three!\n    </div>\n  )\n\n  const featureFlagRender = (flagValue) => {\n    switch(flagValue) {\n      case 'thingOne':\n        return thingOne;\n      case 'thingTwo':\n        return thingTwo;\n      default:\n        // default to thingThree\n        return thingThree;\n    }\n  };\n\n   return <FeatureFlag flagKey=\"new-feature\" render={featureFlagRender} />;\n}\n")),(0,o.yg)("h2",{id:"jest-testing-feature-flags"},"Jest Testing Feature Flags"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},"import { isBooleanFlagEnabled } from 'utils/featureFlags';\n")),(0,o.yg)("p",null,"Add the following block to the top of your test file:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},"jest.mock('utils/featureFlags', () => ({\n  ...jest.requireActual('utils/featureFlags'),\n  isBooleanFlagEnabled: jest.fn().mockImplementation(() => Promise.resolve(false)),\n}));\n")),(0,o.yg)("p",null,"You can mock the boolean value in your tests with:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},"isBooleanFlagEnabled.mockImplementation(() => Promise.resolve(YOUR_BOOLEAN_VALUE_HERE))\n")),(0,o.yg)("h2",{id:"deploying-feature-flags"},"Deploying Feature Flags"),(0,o.yg)("p",null,"Each deployed environment has its own feature flag configuration. The\nidea is that you can test a configuration in one environment and then\ncopy the relevant config to the other environment(s)."),(0,o.yg)("p",null,"Note that each environment is in its own namespace (e.g. the ",(0,o.yg)("inlineCode",{parentName:"p"},"demo"),"\nenvironment is in the ",(0,o.yg)("inlineCode",{parentName:"p"},"demo")," namespace). That is configured in YAML\nfile, so you wouldn't want to copy an entire file from one environment\nto another without ensuring that the namespace is correct for the new\nenvironment."),(0,o.yg)("h3",{id:"step-by-step"},"Step by step"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"Create a branch in git on the ",(0,o.yg)("inlineCode",{parentName:"li"},"transcom/milmove-feature-flags")," repository."),(0,o.yg)("li",{parentName:"ol"},"Edit the file in the ",(0,o.yg)("inlineCode",{parentName:"li"},"feature_flags")," directory corresponding to the\nenvironment."),(0,o.yg)("li",{parentName:"ol"},"Commit the file and open a PR"),(0,o.yg)("li",{parentName:"ol"},"When the PR is merged, the file for that environment will be copied\nto the S3 bucket for that environment. Flipt checks for updates in\nS3 periodically, and so the new settings should automagically\nappear in Flipt. This applies to the live AWS app, not development."),(0,o.yg)("li",{parentName:"ol"},"Create a branch in git on the ",(0,o.yg)("inlineCode",{parentName:"li"},"transcom/mymove")," repository."),(0,o.yg)("li",{parentName:"ol"},"Update the ",(0,o.yg)("inlineCode",{parentName:"li"},".envrc")," file adding a new exported environment variable with the following naming convention: ",(0,o.yg)("inlineCode",{parentName:"li"},"FEATURE_FLAG_${Feature_Flag_Key}"),". The key should be in screaming snake case, and match the key in ",(0,o.yg)("inlineCode",{parentName:"li"},"transcom/milmove-feature-flags"),"."),(0,o.yg)("li",{parentName:"ol"},"Commit the file and open a PR."),(0,o.yg)("li",{parentName:"ol"},"When the PR is merged, the development environment will now have the feature flag."),(0,o.yg)("li",{parentName:"ol"},"Add the feature flag to the ",(0,o.yg)("a",{parentName:"li",href:"#circleci-deployment-flags"},"CircleCI deployment flags"))),(0,o.yg)("p",null,"If for some reason you want to force a copy (e.g. the S3 bucket has\nchanged), add/update a comment at the top of the file and open + merge\na PR."),(0,o.yg)("p",null,"See the ",(0,o.yg)("a",{parentName:"p",href:"https://www.flipt.io/docs/configuration/storage#object"},"Flipt\ndocumentation"),"\nfor more on the file format."),(0,o.yg)("h3",{id:"local-testing"},"Local Testing"),(0,o.yg)("admonition",{type:"caution"},(0,o.yg)("p",{parentName:"admonition"},'Local testing and development run off the "EnvFetcher" which does not use the Flipt container. Please update the ',(0,o.yg)("inlineCode",{parentName:"p"},".envrc")," file accordingly during development to test turning features on and off.\nHowever, to test with a live Flipt container to simulate exactly how it's running in the AWS environments, then please proceed with the following section.")),(0,o.yg)("p",null,"You can run Flipt locally with the feature flags for testing. When running locally in development mode, the namespace is ",(0,o.yg)("inlineCode",{parentName:"p"},"development"),"."),(0,o.yg)("p",null,"The idea is to copy the environment you want to test from ",(0,o.yg)("inlineCode",{parentName:"p"},"milmove-feature-flags")," to the ",(0,o.yg)("inlineCode",{parentName:"p"},"mymove")," project and update the namespace to ",(0,o.yg)("inlineCode",{parentName:"p"},"development"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-sh"},"# cd some/path/where/you/have/mymove\n#\n# now replace the namespace with `development` for local testing\n# and copy it to our local dev environment\nsed 's,^namespace:.*,namespace: development,' \\\n  < ../milmove-feature-flags/feature_flags/someenv_features.yaml \\\n  > config/flipt/storage/development.features.yaml\nmake feature_flag_docker\n# now in another window you can start the server\nFEATURE_FLAG_SERVER_URL=http://localhost:9080 make server_run\n# and you can start the client in another window\nmake client_run\n")),(0,o.yg)("p",null,"The admin console has a limited feature flag testing page you can use. Go to ",(0,o.yg)("a",{parentName:"p",href:"http://adminlocal:3000/system/feature-flags"},"http://adminlocal:3000/system/feature-flags"),". If actually adding a new feature flag, you would want to test your code path directly."),(0,o.yg)("p",null,"Use the ",(0,o.yg)("a",{parentName:"p",href:"https://www.flipt.io/docs/introduction#evaluation-console"},"evaluation\nconsole")," to\nsee if the results are what you expected. Go to ",(0,o.yg)("a",{parentName:"p",href:"http://localhost:9080"},"http://localhost:9080")," to see the Flipt console locally."),(0,o.yg)("h3",{id:"circleci-deployment-flags"},"CircleCI deployment flags"),(0,o.yg)("admonition",{type:"caution"},(0,o.yg)("p",{parentName:"admonition"},"Failing to set CircleCI deployment flags will lead to faulty builds as CircleCI cannot natively find which feature flags are enabled or disabled. It does not even see ",(0,o.yg)("inlineCode",{parentName:"p"},".envrc")," that developers utilize.")),(0,o.yg)("p",null,"To set a feature flag as enabled or disabled within certain deployment environments, you must update the corresponding ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/transcom/mymove/tree/main/config"},"config")," environment variables. CircleCI deployment environments can be found under the ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/transcom/mymove/tree/main/config/env"},"config/env folder"),"."),(0,o.yg)("p",null,'When you export your feature flag variable for a specific environment, make sure you update its "app" and its respective "app-client-tls" file. Example:'),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},'// ${environment} can be "prd", "exp", "stg", "loadtest", "demo", "review", and so on as environments change.\n\nconfig/env/{$environment}.app.env\n\nconfig/env/{$environment}.app-client-tls.env\n')),(0,o.yg)("p",null,"Adding ",(0,o.yg)("inlineCode",{parentName:"p"},"FEATURE_FLAG_EXAMPLE=false")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"true")," per environment. You do not need to add ",(0,o.yg)("inlineCode",{parentName:"p"},"export")," to the front like you would in a typical ",(0,o.yg)("inlineCode",{parentName:"p"},".envrc")," file."),(0,o.yg)("h2",{id:"updating-feature-flag-deployments"},"Updating feature flag deployments"),(0,o.yg)("p",null,"See the ",(0,o.yg)("inlineCode",{parentName:"p"},"transcom/milmove-feature-flags")," repository for information how to update the deployments (e.g. update the image used by flipt)."))}d.isMDXComponent=!0}}]);