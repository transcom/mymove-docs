"use strict";(self.webpackChunkmymove_docs=self.webpackChunkmymove_docs||[]).push([[5807],{12467:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=a(87462),d=(a(67294),a(3905));a(8209);const i={title:"0049 Do not update child records using parent's E-tag"},o="Do not update child records using parent's E-tag",s={unversionedId:"adrs/etag-for-child-updates",id:"adrs/etag-for-child-updates",title:"0049 Do not update child records using parent's E-tag",description:"User Story: Jira Story",source:"@site/docs/adrs/0049-etag-for-child-updates.md",sourceDirName:"adrs",slug:"/adrs/etag-for-child-updates",permalink:"/mymove-docs/docs/adrs/etag-for-child-updates",draft:!1,editUrl:"https://github.com/transcom/mymove-docs/edit/main/docs/adrs/0049-etag-for-child-updates.md",tags:[],version:"current",sidebarPosition:49,frontMatter:{title:"0049 Do not update child records using parent's E-tag"},sidebar:"adrsSidebar",previous:{title:"0048 Use a consistent file structure for front-end code",permalink:"/mymove-docs/docs/adrs/frontend-file-org"},next:{title:"0050 Fork & maintain react-file-viewer under @trussworks",permalink:"/mymove-docs/docs/adrs/doc-viewer-fork"}},r={},l=[{value:"Considered Alternatives",id:"considered-alternatives",level:2},{value:"Decision Outcome",id:"decision-outcome",level:2},{value:"Pros and Cons of the Alternatives",id:"pros-and-cons-of-the-alternatives",level:2},{value:"Make a new endpoint for child updates",id:"make-a-new-endpoint-for-child-updates",level:3},{value:"Pass a second E-tag in the body if the child is to be updated",id:"pass-a-second-e-tag-in-the-body-if-the-child-is-to-be-updated",level:3},{value:"Bubble up a child&#39;s updated_at value to the parent",id:"bubble-up-a-childs-updated_at-value-to-the-parent",level:3}],p={toc:l},u="wrapper";function c(e){let{components:t,...a}=e;return(0,d.kt)(u,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,d.kt)("h1",{id:"do-not-update-child-records-using-parents-e-tag"},"Do not update child records using parent's E-tag"),(0,d.kt)("p",null,(0,d.kt)("strong",{parentName:"p"},"User Story:")," ",(0,d.kt)("a",{parentName:"p",href:"https://dp3.atlassian.net/browse/MB-2566"},"Jira Story")),(0,d.kt)("p",null,"When we have an endpoint that updates a record in the db, it's sometimes desirable to update a child record as well."),(0,d.kt)("p",null,"Generally, to update a record, the caller must provide an E-tag, passed in the header ",(0,d.kt)("inlineCode",{parentName:"p"},"If-Match")," that matches that of the record in the db."),(0,d.kt)("p",null,"However the parent and child have two different E-tags, and only the parent's E-tag is passed in a sole parameter in the header."),(0,d.kt)("p",null,"Therefore, it's not possible to pass in the child and parent E-tag cleanly."),(0,d.kt)("h2",{id:"considered-alternatives"},"Considered Alternatives"),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"Make a new endpoint for child updates so they can be updated separately with the correct E-tag."),(0,d.kt)("li",{parentName:"ul"},"Pass a second E-tag in the body if the child is to be updated."),(0,d.kt)("li",{parentName:"ul"},"Bubble up a child's updated_at value to the parent, so that the child and parent will have one E-tag.")),(0,d.kt)("h2",{id:"decision-outcome"},"Decision Outcome"),(0,d.kt)("p",null,"We will make a new endpoint for child updates so they can be updated separately with the correct E-tag."),(0,d.kt)("p",null,"Currently this is just true for address and agent updates."),(0,d.kt)("h2",{id:"pros-and-cons-of-the-alternatives"},"Pros and Cons of the Alternatives"),(0,d.kt)("h3",{id:"make-a-new-endpoint-for-child-updates"},"Make a new endpoint for child updates"),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},(0,d.kt)("inlineCode",{parentName:"li"},"+")," The mechanism for optimistic locking stays the same across all endpoints, so it's understandable for the Prime."),(0,d.kt)("li",{parentName:"ul"},(0,d.kt)("inlineCode",{parentName:"li"},"+")," The ",(0,d.kt)("inlineCode",{parentName:"li"},"updated_at")," value for parent and child record will correctly state the last time that record was updated."),(0,d.kt)("li",{parentName:"ul"},(0,d.kt)("inlineCode",{parentName:"li"},"-")," More endpoints to create and maintain.")),(0,d.kt)("h3",{id:"pass-a-second-e-tag-in-the-body-if-the-child-is-to-be-updated"},"Pass a second E-tag in the body if the child is to be updated"),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},(0,d.kt)("inlineCode",{parentName:"li"},"-")," The mechanism differs when you want to update a child, as the E-tag is passed in body instead of header. Makes the mechanism inconsistent, harder to reason about and harder to explain to Prime."),(0,d.kt)("li",{parentName:"ul"},(0,d.kt)("inlineCode",{parentName:"li"},"+")," Fewer endpoints to maintain")),(0,d.kt)("h3",{id:"bubble-up-a-childs-updated_at-value-to-the-parent"},"Bubble up a child's updated_at value to the parent"),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},(0,d.kt)("inlineCode",{parentName:"li"},"-")," Adds complexity because the child may have multiple parents and Prime would not realize that they have unwittingly updated unrelated records."),(0,d.kt)("li",{parentName:"ul"},(0,d.kt)("inlineCode",{parentName:"li"},"-")," The mechanism differs from the norm and making exceptions for certain updates, will make it hard to be consistent across the codebase."),(0,d.kt)("li",{parentName:"ul"},(0,d.kt)("inlineCode",{parentName:"li"},"+")," Fewer endpoints to maintain")))}c.isMDXComponent=!0}}]);