"use strict";(self.webpackChunkmymove_docs=self.webpackChunkmymove_docs||[]).push([[8815],{32824:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));n(8209);const s={sidebar_position:4},i="Set Up Service Subpackage and Interface",o={unversionedId:"backend/guides/service-objects/set-up-service-subpackage-and-interface",id:"backend/guides/service-objects/set-up-service-subpackage-and-interface",title:"Set Up Service Subpackage and Interface",description:"Since we're going to be creating data service objects, we'll be following the guidelines in",source:"@site/docs/backend/guides/service-objects/set-up-service-subpackage-and-interface.md",sourceDirName:"backend/guides/service-objects",slug:"/backend/guides/service-objects/set-up-service-subpackage-and-interface",permalink:"/mymove-docs/docs/backend/guides/service-objects/set-up-service-subpackage-and-interface",draft:!1,editUrl:"https://github.com/transcom/mymove-docs/edit/main/docs/backend/guides/service-objects/set-up-service-subpackage-and-interface.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"backendSidebar",previous:{title:"Structure",permalink:"/mymove-docs/docs/backend/guides/service-objects/structure"},next:{title:"Validation",permalink:"/mymove-docs/docs/backend/guides/service-objects/validation"}},c={},p=[{value:"Service Interface",id:"service-interface",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Return values",id:"return-values",level:3},{value:"Mocks",id:"mocks",level:3},{value:"Service Test File",id:"service-test-file",level:2}],l={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"set-up-service-subpackage-and-interface"},"Set Up Service Subpackage and Interface"),(0,r.kt)("p",null,"Since we're going to be creating data service objects, we'll be following the guidelines in\n",(0,r.kt)("a",{parentName:"p",href:"/docs/backend/guides/service-objects/structure#datautility-service-objects-high-level-structure"},"Structure - Data/Utility High Level Structure"),"."),(0,r.kt)("p",null,"For the purposes of this walk-through, that means creating a subpackage in the ",(0,r.kt)("inlineCode",{parentName:"p"},"services")," package called ",(0,r.kt)("inlineCode",{parentName:"p"},"pet")," and a\ncorresponding interface file called ",(0,r.kt)("inlineCode",{parentName:"p"},"pet.go"),", like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:"{5,7}","{5,7}":!0},"mymove/\n\u251c\u2500\u2500 pkg/\n\u2502   \u251c\u2500\u2500 services/\n\u2502   \u2502   \u251c\u2500\u2500 ...\n\u2502   \u2502   \u251c\u2500\u2500 pet/                       <- our new subpackage\n\u2502   \u2502   \u251c\u2500\u2500 ...\n\u2502   \u2502   \u251c\u2500\u2500 pet.go                     <- our new interface in the services package\n\u2502   \u2502   \u251c\u2500\u2500 ...\n")),(0,r.kt)("h2",{id:"service-interface"},"Service Interface"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"services/pet.go")," file will define the interface for our service objects. As noted in the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/backend/guides/service-objects/structure"},"structure")," page, this file will only have the interface, while the\nimplementation logic will live in the subpackage. This means that the interface's functions that we define here will\nhave to match the receiver functions for our service object structs we create later in the implementation files."),(0,r.kt)("admonition",{title:"Interfaces vs Structs",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},'If you are new to Go and are still a little wobbly on the concept of "interfaces" vs "structs" remember:'),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Interface")," types define ",(0,r.kt)("em",{parentName:"li"},"functions"),". They are concerned with ",(0,r.kt)("em",{parentName:"li"},"verbs"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Struct")," types define ",(0,r.kt)("em",{parentName:"li"},"objects"),". They are concerned with ",(0,r.kt)("em",{parentName:"li"},"nouns"),"."))),(0,r.kt)("p",null,"Let's start off by defining the bare interfaces for a ",(0,r.kt)("inlineCode",{parentName:"p"},"PetCreator")," and a ",(0,r.kt)("inlineCode",{parentName:"p"},"PetUpdater"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="pkg/services/pet.go"',title:'"pkg/services/pet.go"'},"package services\n\n// PetCreator Interface for the service object that creates a pet\ntype PetCreator interface {\n}\n\n// PetUpdater Interface for the service object that updates a pet\ntype PetUpdater interface {\n}\n")),(0,r.kt)("p",null,"Following our naming conventions stated in\n",(0,r.kt)("a",{parentName:"p",href:"/docs/backend/guides/service-objects/structure#service-object-naming"},"Structure - Service Object Naming"),", we'll\ndefine the interface functions like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="pkg/services/pet.go"',title:'"pkg/services/pet.go"'},"package services\n\n// PetCreator Interface for the service object that creates a pet\ntype PetCreator interface {\n    CreatePet() ()\n}\n\n// PetUpdater Interface for the service object that updates a pet\ntype PetUpdater interface {\n    UpdatePet() ()\n}\n")),(0,r.kt)("p",null,"Now we'll need to think about what we'll need to take in as parameters and what we'll want to return. "),(0,r.kt)("h3",{id:"parameters"},"Parameters"),(0,r.kt)("p",null,"Service objects should be reusable and modular, so keep this in mind while defining your parameters. To start with,\nthey should be the bare minimum needed for someone to call this function. Use your best judgment."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You will always need to pass in the ",(0,r.kt)("inlineCode",{parentName:"p"},"AppContext")," as the first argument. This is standard in our codebase. Read more\nabout ",(0,r.kt)("a",{parentName:"p",href:"/docs/backend/guides/use-stateless-services-with-app-context"},"AppContext and how to use it"),".")),(0,r.kt)("p",null,"Often, the particular model type you are dealing with is passed in as input as well. For our example, we'll have a\nservice object to create a pet and one to update a pet, so we'll need to take in a ",(0,r.kt)("inlineCode",{parentName:"p"},"models.Pet")," type. For updates,\nwe'll also need to take in an E-tag per\n",(0,r.kt)("a",{parentName:"p",href:"/mymove-docs/docs/adrs/optimistic-locking"},"ADR 0042 Optimistic Locking"),"."),(0,r.kt)("p",null,"So now our interfaces look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="pkg/services/pet.go"',title:'"pkg/services/pet.go"'},'package services\n\nimport (\n    "github.com/transcom/mymove/pkg/appcontext"\n    "github.com/transcom/mymove/pkg/models"\n)\n\n// PetCreator Interface for the service object that creates a pet\ntype PetCreator interface {\n    CreatePet(appCtx appcontext.AppContext, pet models.Pet) ()\n}\n\n// PetUpdater Interface for the service object that updates a pet\ntype PetUpdater interface {\n    UpdatePet(appCtx appcontext.AppContext, pet models.Pet, eTag string) ()\n}\n')),(0,r.kt)("h3",{id:"return-values"},"Return values"),(0,r.kt)("p",null,"Service objects should return as many return values as appropriate, and this will always include possible errors. A\ncommon convention is to return the pointer of the subject model type and a possible error. So taking that into\naccount, our interfaces now look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="pkg/services/pet.go"',title:'"pkg/services/pet.go"'},'package services\n\nimport (\n    "github.com/transcom/mymove/pkg/appcontext"\n    "github.com/transcom/mymove/pkg/models"\n)\n\n// PetCreator Interface for the service object that creates a pet\ntype PetCreator interface {\n    CreatePet(appCtx appcontext.AppContext, pet models.Pet) (*models.Pet, error)\n}\n\n// PetUpdater Interface for the service object that updates a pet\ntype PetUpdater interface {\n    UpdatePet(appCtx appcontext.AppContext, pet models.Pet, eTag string) (*models.Pet, error)\n}\n')),(0,r.kt)("h3",{id:"mocks"},"Mocks"),(0,r.kt)("p",null,"The final piece we need to define at the interface level is the mocks. When our service objects are dependencies\nelsewhere, we want to be able to mock them out for those tests, letting them focus on what they're testing rather\nthan having to worry about what our service object does. We use\n",(0,r.kt)("a",{parentName:"p",href:"/docs/tools/mockery/generate-mocks-with-mockery"},(0,r.kt)("inlineCode",{parentName:"a"},"mockery")," to generate our mocks"),". To set up our service objects to\nbe able to be mocked, we'll need to add tags that ",(0,r.kt)("inlineCode",{parentName:"p"},"go:generate")," can read, like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="pkg/services/pet.go"',title:'"pkg/services/pet.go"'},'package services\n\nimport (\n    "github.com/transcom/mymove/pkg/appcontext"\n    "github.com/transcom/mymove/pkg/models"\n)\n\n// PetCreator Interface for the service object that creates a pet\n//go:generate mockery --name PetCreator --disable-version-string\ntype PetCreator interface {\n    CreatePet(appCtx appcontext.AppContext, pet models.Pet) (*models.Pet, error)\n}\n\n// PetUpdater Interface for the service object that updates a pet\n//go:generate mockery --name PetUpdater --disable-version-string\ntype PetUpdater interface {\n    UpdatePet(appCtx appcontext.AppContext, pet models.Pet, eTag string) (*models.Pet, error)\n}\n')),(0,r.kt)("p",null,"Note that the name we pass in the ",(0,r.kt)("inlineCode",{parentName:"p"},"--name")," argument matches the name of our interface type. That's what will get\nused by any test that wants to mock out our service."),(0,r.kt)("p",null,"Now you could generate the mocks using ",(0,r.kt)("inlineCode",{parentName:"p"},"make mocks_generate")," and you should see that new mock files are created for\nthe new service objects."),(0,r.kt)("h2",{id:"service-test-file"},"Service Test File"),(0,r.kt)("p",null,"Now we'll add the boilerplate testing suite setup mentioned in\n",(0,r.kt)("a",{parentName:"p",href:"./structure#service-object-subpackage-structure"},"Service Object Subpackage Structure"),". We'll add a file called\n",(0,r.kt)("inlineCode",{parentName:"p"},"pet_service_test.go")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"pet")," subpackage like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:"{7}","{7}":!0},"mymove/\n\u251c\u2500\u2500 pkg/\n\u2502   \u251c\u2500\u2500 services/\n\u2502   \u2502   \u251c\u2500\u2500 ...\n\u2502   \u2502   \u251c\u2500\u2500 pet/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 pet_service_test.go    <- boilerplate testing suite setup\n\u2502   \u2502   \u251c\u2500\u2500 ...\n")),(0,r.kt)("p",null,"Here is what the file will contain:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package pet\n\nimport (\n    "testing"\n\n    "github.com/stretchr/testify/suite"\n\n    "github.com/transcom/mymove/pkg/testingsuite"\n)\n\ntype PetSuite struct {\n    testingsuite.PopTestSuite\n}\n\nfunc TestPetServiceSuite(t *testing.T) {\n    ts := &PetSuite{\n        PopTestSuite: testingsuite.NewPopTestSuite(testingsuite.CurrentPackage(), testingsuite.WithPerTestTransaction()),\n    }\n\n    suite.Run(t, ts)\n\n    ts.PopTestSuite.TearDown()\n}\n')),(0,r.kt)("p",null,"This file sets up our ",(0,r.kt)("inlineCode",{parentName:"p"},"pet")," subpackage to enable\n",(0,r.kt)("a",{parentName:"p",href:"/docs/backend/testing/running-server-tests-inside-a-transaction"},"running tests in transactions"),"."),(0,r.kt)("p",null,"That's it for this step, we'll add more files to the subpackage as we go along the process and fill in the interface\nwhen we start setting up our service objects."))}d.isMDXComponent=!0}}]);